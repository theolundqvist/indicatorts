{
  "version": 3,
  "sources": ["../src/index.ts", "../src/helper/numArray.ts", "../src/strategy/action.ts", "../src/backtest/backtest.ts", "../src/backtest/companyResult.ts", "../src/strategy/buyAndHoldStrategy.ts", "../src/indicator/trend/sma.ts", "../src/indicator/momentum/awesomeOscillator.ts", "../src/strategy/momentum/awesomeOscillatorStrategy.ts", "../src/helper/binarySearchTree.ts", "../src/indicator/trend/mmax.ts", "../src/indicator/trend/mmin.ts", "../src/indicator/momentum/ichimokuCloud.ts", "../src/strategy/momentum/ichimokuCloudStrategy.ts", "../src/indicator/trend/rma.ts", "../src/indicator/momentum/rsi.ts", "../src/indicator/momentum/rsi2.ts", "../src/strategy/momentum/rsi2Strategy.ts", "../src/indicator/momentum/stochasticOscillator.ts", "../src/strategy/momentum/stochasticOscillatorStrategy.ts", "../src/indicator/momentum/williamsR.ts", "../src/strategy/momentum/williamsRStrategy.ts", "../src/indicator/trend/ema.ts", "../src/indicator/trend/absolutePriceOscillator.ts", "../src/strategy/trend/absolutePriceOscillatorStrategy.ts", "../src/indicator/trend/since.ts", "../src/indicator/trend/aroon.ts", "../src/strategy/trend/aroonStrategy.ts", "../src/indicator/trend/balanceOfPower.ts", "../src/strategy/trend/balanceOfPowerStrategy.ts", "../src/helper/regression.ts", "../src/indicator/trend/chandeForecastOscillator.ts", "../src/strategy/trend/chandeForecastOscillatorStrategy.ts", "../src/indicator/trend/kdj.ts", "../src/strategy/trend/kdjStrategy.ts", "../src/indicator/trend/macd.ts", "../src/strategy/trend/macdStrategy.ts", "../src/indicator/trend.ts", "../src/indicator/trend/parabolicSar.ts", "../src/strategy/trend/parabolicSarStrategy.ts", "../src/indicator/trend/typicalPrice.ts", "../src/strategy/trend/typicalPriceStrategy.ts", "../src/indicator/trend/msum.ts", "../src/indicator/trend/vortex.ts", "../src/strategy/trend/vortexStrategy.ts", "../src/indicator/volatility/accelerationBands.ts", "../src/strategy/volatility/accelerationBandsStrategy.ts", "../src/indicator/volatility/mstd.ts", "../src/indicator/volatility/bollingerBands.ts", "../src/strategy/volatility/bollingerBandsStrategy.ts", "../src/indicator/volatility/projectionOscillator.ts", "../src/strategy/volatility/projectionOscillatorStrategy.ts", "../src/indicator/volume/chaikinMoneyFlow.ts", "../src/strategy/volume/chaikinMoneyFlowStrategy.ts", "../src/indicator/volume/easeOfMovement.ts", "../src/strategy/volume/easeOfMovementStrategy.ts", "../src/indicator/volume/forceIndex.ts", "../src/strategy/volume/forceIndexStrategy.ts", "../src/indicator/volume/moneyFlowIndex.ts", "../src/strategy/volume/moneyFlowIndexStrategy.ts", "../src/indicator/volume/negativeVolumeIndex.ts", "../src/strategy/volume/negativeVolumeIndexStrategy.ts", "../src/indicator/volume/volumeWeightedAveragePrice.ts", "../src/strategy/volume/volumeWeightedAveragePriceStrategy.ts", "../src/backtest/strategyInfo.ts", "../src/backtest/strategyStats.ts", "../src/chart/numRange.ts", "../src/chart/numScaler.ts", "../src/chart/chart.ts", "../src/helper/date.ts", "../src/helper/asset.ts", "../src/indicator/volume/accumulationDistribution.ts", "../src/indicator/momentum/chaikinOscillator.ts", "../src/indicator/momentum/percentagePriceOscillator.ts", "../src/indicator/momentum/percentageVolumeOscillator.ts", "../src/indicator/trend/communityChannelIndex.ts", "../src/indicator/trend/dema.ts", "../src/indicator/trend/massIndex.ts", "../src/indicator/trend/qstick.ts", "../src/indicator/trend/tema.ts", "../src/indicator/trend/trima.ts", "../src/indicator/trend/trix.ts", "../src/indicator/trend/vwma.ts", "../src/indicator/volatility/atr.ts", "../src/indicator/volatility/bollingerBandsWidth.ts", "../src/indicator/volatility/chandelierExit.ts", "../src/indicator/volatility/donchianChannel.ts", "../src/indicator/volatility/keltnerChannel.ts", "../src/indicator/volatility/ulcerIndex.ts", "../src/indicator/volume/onBalanceVolume.ts", "../src/indicator/volume/volumePriceTrend.ts", "../src/strategy/asset.ts", "../src/strategy/trend/vwmaStrategy.ts"],
  "sourcesContent": ["// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nexport * from './backtest/backtest';\nexport * from './backtest/companyResult';\nexport * from './backtest/strategyInfo';\nexport * from './backtest/strategyResult';\nexport * from './backtest/strategyStats';\nexport * from './chart/chart';\nexport * from './chart/numRange';\nexport * from './chart/numScaler';\nexport * from './company/companyInfo';\nexport * from './helper/binarySearchTree';\nexport * from './helper/date';\nexport * from './helper/numArray';\nexport * from './helper/asset';\nexport * from './helper/regression';\nexport * from './indicator/momentum/awesomeOscillator';\nexport * from './indicator/momentum/chaikinOscillator';\nexport * from './indicator/momentum/ichimokuCloud';\nexport * from './indicator/momentum/percentagePriceOscillator';\nexport * from './indicator/momentum/percentageVolumeOscillator';\nexport * from './indicator/momentum/rsi';\nexport * from './indicator/momentum/rsi2';\nexport * from './indicator/momentum/stochasticOscillator';\nexport * from './indicator/momentum/williamsR';\nexport * from './indicator/trend';\nexport * from './indicator/trend/absolutePriceOscillator';\nexport * from './indicator/trend/aroon';\nexport * from './indicator/trend/balanceOfPower';\nexport * from './indicator/trend/chandeForecastOscillator';\nexport * from './indicator/trend/communityChannelIndex';\nexport * from './indicator/trend/dema';\nexport * from './indicator/trend/ema';\nexport * from './indicator/trend/kdj';\nexport * from './indicator/trend/macd';\nexport * from './indicator/trend/massIndex';\nexport * from './indicator/trend/mmax';\nexport * from './indicator/trend/mmin';\nexport * from './indicator/trend/msum';\nexport * from './indicator/trend/parabolicSar';\nexport * from './indicator/trend/qstick';\nexport * from './indicator/trend/since';\nexport * from './indicator/trend/rma';\nexport * from './indicator/trend/sma';\nexport * from './indicator/trend/tema';\nexport * from './indicator/trend/trima';\nexport * from './indicator/trend/trix';\nexport * from './indicator/trend/typicalPrice';\nexport * from './indicator/trend/vwma';\nexport * from './indicator/trend/vortex';\nexport * from './indicator/volatility/accelerationBands';\nexport * from './indicator/volatility/atr';\nexport * from './indicator/volatility/bollingerBands';\nexport * from './indicator/volatility/bollingerBandsWidth';\nexport * from './indicator/volatility/chandelierExit';\nexport * from './indicator/volatility/donchianChannel';\nexport * from './indicator/volatility/keltnerChannel';\nexport * from './indicator/volatility/mstd';\nexport * from './indicator/volatility/projectionOscillator';\nexport * from './indicator/volatility/ulcerIndex';\nexport * from './indicator/volume/accumulationDistribution';\nexport * from './indicator/volume/chaikinMoneyFlow';\nexport * from './indicator/volume/easeOfMovement';\nexport * from './indicator/volume/forceIndex';\nexport * from './indicator/volume/moneyFlowIndex';\nexport * from './indicator/volume/negativeVolumeIndex';\nexport * from './indicator/volume/onBalanceVolume';\nexport * from './indicator/volume/volumePriceTrend';\nexport * from './indicator/volume/volumeWeightedAveragePrice';\nexport * from './strategy/action';\nexport * from './strategy/asset';\nexport * from './strategy/buyAndHoldStrategy';\nexport * from './strategy/momentum/awesomeOscillatorStrategy';\nexport * from './strategy/momentum/ichimokuCloudStrategy';\nexport * from './strategy/momentum/rsi2Strategy';\nexport * from './strategy/momentum/stochasticOscillatorStrategy';\nexport * from './strategy/momentum/williamsRStrategy';\nexport * from './strategy/strategyFunction';\nexport * from './strategy/trend/absolutePriceOscillatorStrategy';\nexport * from './strategy/trend/aroonStrategy';\nexport * from './strategy/trend/balanceOfPowerStrategy';\nexport * from './strategy/trend/chandeForecastOscillatorStrategy';\nexport * from './strategy/trend/kdjStrategy';\nexport * from './strategy/trend/macdStrategy';\nexport * from './strategy/trend/parabolicSarStrategy';\nexport * from './strategy/trend/typicalPriceStrategy';\nexport * from './strategy/trend/vwmaStrategy';\nexport * from './strategy/trend/vortexStrategy';\nexport * from './strategy/volatility/accelerationBandsStrategy';\nexport * from './strategy/volatility/bollingerBandsStrategy';\nexport * from './strategy/volatility/projectionOscillatorStrategy';\nexport * from './strategy/volume/chaikinMoneyFlowStrategy';\nexport * from './strategy/volume/easeOfMovementStrategy';\nexport * from './strategy/volume/forceIndexStrategy';\nexport * from './strategy/volume/moneyFlowIndexStrategy';\nexport * from './strategy/volume/negativeVolumeIndexStrategy';\nexport * from './strategy/volume/volumeWeightedAveragePriceStrategy';\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Checkes the values lenghts.\n * @param values values list.\n */\nexport function checkSameLength(...values: number[][]): void {\n  if (values.length > 0) {\n    const length = values[0].length;\n\n    for (let i = 1; i < values.length; i++) {\n      if (values[i].length !== length) {\n        throw new Error(`values length at ${i} not ${length}`);\n      }\n    }\n  }\n}\n\n\nexport function mean(...values: number[][]): number[] {\n  checkSameLength(...values);\n\n  const result = new Array<number>(values[0].length);\n\n  for (let i = 0; i < result.length; i++) {\n    let sum = 0;\n\n    for (let j = 0; j < values.length; j++) {\n      sum += values[j][i];\n    }\n\n    result[i] = sum / values.length;\n  }\n\n  return result;\n}\n\n/**\n * Absolute values of the given values.\n * @param values values array.\n * @return absolute values.\n */\nexport function abs(values: number[]): number[] {\n  return values.map((value) => Math.abs(value));\n}\n\n/**\n * Adds values2 to values1.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function add(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] + values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Adds n to values.\n * @param n add value.\n * @param values values array.\n * @return result array.\n */\nexport function addBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] + n;\n  }\n\n  return result;\n}\n\n/**\n * Divides values1 by values2.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function divide(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] / values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Divides values by n.\n * @param n divide value.\n * @param values values array.\n * @return result array.\n */\nexport function divideBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] / n;\n  }\n\n  return result;\n}\n\n/**\n * Multiply values1 by values2.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function multiply(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] * values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Multiply values by n.\n * @param n multiply value.\n * @param values values array.\n * @return result array.\n */\nexport function multiplyBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values[i] * n;\n  }\n\n  return result;\n}\n\n/**\n * Subtracts values2 from values1.\n * @param values1 values one.\n * @param values2 values two.\n * @return result array.\n */\nexport function subtract(values1: number[], values2: number[]): number[] {\n  checkSameLength(values1, values2);\n\n  const result = new Array<number>(values1.length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = values1[i] - values2[i];\n  }\n\n  return result;\n}\n\n/**\n * Subtractes n from values.\n * @param n subtract value.\n * @param values values array.\n * @return result array.\n */\nexport function subtractBy(n: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = values[i] - n;\n  }\n\n  return result;\n}\n\n/**\n * Shift values right by given amount and fill with value.\n * @param n shift amount.\n * @param fill fill value.\n * @param values values array.\n * @returns shifted and filled values.\n */\nexport function shiftRightAndFillBy(\n  n: number,\n  fill: number,\n  values: number[]\n): number[] {\n  const result = new Array<number>(values.length);\n\n  for (let i = 0; i < result.length; i++) {\n    if (i < n) {\n      result[i] = fill;\n    } else {\n      result[i] = values[i - n];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Shifts values right by given amount.\n * @param n shift amount.\n * @param values values array.\n * @return shifted values.\n */\nexport function shiftRightBy(n: number, values: number[]): number[] {\n  return shiftRightAndFillBy(n, 0, values);\n}\n\n/**\n * Change between the current value and the value n before.\n * @param n shift amount.\n * @param values values array.\n * @returns changes array.\n */\nexport function changes(n: number, values: number[]): number[] {\n  return subtract(values, shiftRightBy(n, values));\n}\n\n/**\n * Extracts the sign of the values. Returns 1 for the\n * positive and zero, and -1 for the negative.\n * @param values values array.\n * @return sign values.\n */\nexport function extractSigns(values: number[]): number[] {\n  return values.map((value) => (value >= 0 ? 1 : -1));\n}\n\n/**\n * Transpose of given values.\n * @param values values arrays.\n * @return transposed values.\n */\nexport function transpose(...values: number[][]): number[][] {\n  checkSameLength(...values);\n\n  const result = new Array<number[]>(values[0].length);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = new Array<number>(values.length);\n    for (let j = 0; j < result[i].length; j++) {\n      result[i][j] = values[j][i];\n    }\n  }\n\n  return result;\n}\n\n/**\n * Max value of rows.\n * @param values values arrays.\n * @return max rows.\n */\nexport function max(...values: number[][]): number[] {\n  return transpose(...values).map((row) => Math.max(...row));\n}\n\n/**\n * Rounds the value to given number of digits.\n * @param digits digits number.\n * @param value numeric value.\n * @return rounded value.\n */\nexport function roundDigits(digits: number, value: number): number {\n  const n = Math.pow(10, digits);\n  return Math.round(value * n) / n;\n}\n\n/**\n * Rounds the values to given number of digits.\n * @param digits digits number.\n * @param values values array.\n * @return rounded values.\n */\nexport function roundDigitsAll(digits: number, values: number[]): number[] {\n  return values.map((value) => roundDigits(digits, value));\n}\n\n/**\n * Generates numbers.\n *\n * @param begin begin number.\n * @param end end number.\n * @param step step number.\n * @return generated numbers.\n */\nexport function generateNumbers(\n  begin: number,\n  end: number,\n  step: number\n): number[] {\n  const result = new Array<number>((end - begin) / step);\n\n  for (let i = 0; i < result.length; i++) {\n    result[i] = begin + step * i;\n  }\n\n  return result;\n}\n\n/**\n * Power of the given bases to the exponent.\n *\n * @param bases base values.\n * @param exponent exponent value.\n * @return power values.\n */\nexport function pow(bases: number[], exponent: number): number[] {\n  return bases.map((base) => Math.pow(base, exponent));\n}\n\n/**\n * Square roots of values.\n * @param values value array.\n * @return square roots.\n */\nexport function sqrt(values: number[]): number[] {\n  return values.map((value) => Math.sqrt(value));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../helper/numArray';\n\n/**\n * Strategy action.\n */\nexport enum Action {\n  SELL = -1,\n  HOLD = 0,\n  BUY = 1,\n}\n\n/**\n * Reverses the given actions.\n * @param actions strategy actions.\n * @return reversed actions.\n */\nexport function reverseActions(actions: Action[]): Action[] {\n  return actions.map((action) => {\n    if (action === Action.BUY) {\n      return Action.SELL;\n    } else if (action === Action.SELL) {\n      return Action.BUY;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n\n/**\n * Apply the actions on the closing values to calculate gains.\n *\n * @param closings closing values.\n * @param actions strategy actions.\n * @return strategy gains.\n */\nexport function applyActions(closings: number[], actions: Action[]): number[] {\n  checkSameLength(closings, actions);\n\n  const gains = new Array<number>(closings.length);\n  const initialBalance = 1;\n\n  let balance = initialBalance;\n  let shares = 0;\n\n  for (let i = 0; i < gains.length; i++) {\n    if (actions[i] === Action.BUY) {\n      if (balance > 0) {\n        shares = balance / closings[i];\n        balance = 0;\n      }\n    } else if (actions[i] === Action.SELL) {\n      if (shares > 0) {\n        balance = shares * closings[i];\n        shares = 0;\n      }\n    }\n\n    gains[i] =\n      (shares * closings[i] + balance - initialBalance) / initialBalance;\n  }\n\n  return gains;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { applyActions } from '../strategy/action';\nimport { Asset } from '../strategy/asset';\nimport { StrategyInfo } from './strategyInfo';\nimport { StrategyResult } from './strategyResult';\n\n/**\n * Backtests the given strategies.\n *\n * @param asset asset object.\n * @param infos strategy infos.\n * @return strategy results.\n */\nexport function backtest(\n  asset: Asset,\n  infos: StrategyInfo[]\n): StrategyResult[] {\n  const result = new Array<StrategyResult>(infos.length);\n\n  for (let i = 0; i < result.length; i++) {\n    const actions = infos[i].strategy(asset);\n    const gains = applyActions(asset.closings, actions);\n\n    result[i] = {\n      info: infos[i],\n      gains: gains,\n      gain: gains[gains.length - 1],\n      lastAction: actions[actions.length - 1],\n    };\n  }\n\n  result.sort((a, b) => b.gain - a.gain);\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { StrategyResult } from './strategyResult';\nimport { CompanyInfo } from '../company/companyInfo';\n\n/**\n * Company result.\n */\nexport interface CompanyResult {\n  companyInfo: CompanyInfo;\n  strategyResults: StrategyResult[];\n}\n\n/**\n * Company result sort by.\n */\nexport enum CompanyResultSortBy {\n  SYMBOL,\n  NAME,\n  STRATEGY,\n  GAIN,\n  ACTION,\n}\n\n/**\n * Sorts the company results.\n *\n * @param companyResults company results.\n * @param sortBy sort by.\n * @param ascending toggle.\n * @return sorted results.\n */\nexport function sortCompanyResults(\n  companyResults: CompanyResult[],\n  sortBy: CompanyResultSortBy,\n  ascending: boolean\n): CompanyResult[] {\n  let sorted: CompanyResult[] = [];\n\n  switch (sortBy) {\n    case CompanyResultSortBy.SYMBOL:\n      sorted = companyResults.sort((a, b) => {\n        return a.companyInfo.symbol.localeCompare(b.companyInfo.symbol);\n      });\n      break;\n\n    case CompanyResultSortBy.NAME:\n      sorted = companyResults.sort((a, b) => {\n        return a.companyInfo.name.localeCompare(b.companyInfo.name);\n      });\n      break;\n\n    case CompanyResultSortBy.STRATEGY:\n      sorted = companyResults.sort((a, b) => {\n        return a.strategyResults[0].info.name.localeCompare(\n          b.strategyResults[0].info.name\n        );\n      });\n      break;\n\n    case CompanyResultSortBy.GAIN:\n      sorted = companyResults.sort((a, b) => {\n        return a.strategyResults[0].gain - b.strategyResults[0].gain;\n      });\n      break;\n\n    case CompanyResultSortBy.ACTION:\n      sorted = companyResults.sort((a, b) => {\n        return (\n          a.strategyResults[0].lastAction - b.strategyResults[0].lastAction\n        );\n      });\n      break;\n  }\n\n  if (!ascending) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from './asset';\nimport { Action } from './action';\n\n/**\n * Buy and hold strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function buyAndHoldStrategy(asset: Asset): Action[] {\n  return Array<Action>(asset.closings.length).fill(Action.BUY);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Simple moving average (SMA).\n * @param period window period.\n * @param values values array.\n * @return SMA values.\n */\nexport function sma(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n\n    if (i >= period) {\n      sum -= values[i - period];\n      result[i] = sum / period;\n    } else {\n      result[i] = sum / (i + 1);\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy, subtract } from '../../helper/numArray';\nimport { sma } from '../trend/sma';\n\n/**\n * Awesome Oscillator.\n *\n * Median Price = ((Low + High) / 2).\n * AO = 5-Period SMA - 34-Period SMA.\n *\n * @param highs high values.\n * @param lows low values.\n * @return awesome oscillator.\n */\nexport function awesomeOscillator(highs: number[], lows: number[]): number[] {\n  const medianPrice = divideBy(2, add(lows, highs));\n  const sma5 = sma(5, medianPrice);\n  const sma34 = sma(34, medianPrice);\n  const ao = subtract(sma5, sma34);\n  return ao;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { awesomeOscillator } from '../../indicator/momentum/awesomeOscillator';\n\n/**\n * Awesome oscillator strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function awesomeOscillatorStrategy(asset: Asset): Action[] {\n  const os = awesomeOscillator(asset.highs, asset.lows);\n  return os.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Tree node.\n */\ninterface TreeNode {\n  value: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n}\n\n/**\n * Tree result info object.\n */\ninterface TreeNodeInfo {\n  node: TreeNode | null;\n  parent: TreeNode | null;\n}\n\n/**\n * Binary search tree object.\n */\nexport class BinarySearchTree {\n  private root: TreeNode | null = null;\n\n  /**\n   * Inserts the given value.\n   * @param value numeric value.\n   */\n  insert(value: number): void {\n    const node: TreeNode = {\n      value: value,\n      left: null,\n      right: null,\n    };\n\n    if (this.root === null) {\n      this.root = node;\n      return;\n    }\n\n    let current = this.root;\n    let found = false;\n\n    while (!found) {\n      if (node.value <= current.value) {\n        if (current.left === null) {\n          current.left = node;\n          found = true;\n        } else {\n          current = current.left;\n        }\n      } else {\n        if (current.right === null) {\n          current.right = node;\n          found = true;\n        } else {\n          current = current.right;\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the given value.\n   * @param value numeric value.\n   * @return value removed.\n   */\n  remove(value: number): boolean {\n    const info: TreeNodeInfo = {\n      node: this.root,\n      parent: null,\n    };\n\n    while (info.node !== null) {\n      if (value === info.node.value) {\n        this.removeNode(info);\n        return true;\n      } else {\n        info.parent = info.node;\n\n        if (value < info.node.value) {\n          info.node = info.node.left;\n        } else {\n          info.node = info.node.right;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Min value.\n   * @return min value.\n   */\n  min(): number {\n    const minInfo = BinarySearchTree.minNode(this.root);\n    if (minInfo.node === null) {\n      throw new Error('Tree empty');\n    }\n\n    return minInfo.node.value;\n  }\n\n  /**\n   * Max value.\n   * @return max value.\n   */\n  max(): number {\n    const maxInfo = BinarySearchTree.maxNode(this.root);\n    if (maxInfo.node === null) {\n      throw new Error('Tree empty');\n    }\n\n    return maxInfo.node?.value;\n  }\n\n  /**\n   * Removes the node info.\n   * @param info node info.\n   */\n  private removeNode(info: TreeNodeInfo) {\n    if (info.node === null) {\n      return;\n    }\n\n    if (info.node.left !== null && info.node.right !== null) {\n      const minInfo = BinarySearchTree.minNode(info.node.right);\n      if (minInfo.parent === null) {\n        minInfo.parent = info.node;\n      }\n\n      this.removeNode(minInfo);\n      if (minInfo.node !== null) {\n        info.node.value = minInfo.node.value;\n      }\n    } else {\n      let child: TreeNode | null = null;\n\n      if (info.node.left !== null) {\n        child = info.node.left;\n      } else {\n        child = info.node.right;\n      }\n\n      if (info.parent === null) {\n        this.root = child;\n      } else if (info.parent.left === info.node) {\n        info.parent.left = child;\n      } else {\n        info.parent.right = child;\n      }\n    }\n  }\n\n  /**\n   * Min node function returns the min node and its parent.\n   * @param root root node.\n   * @return node info.\n   */\n  private static minNode(root: TreeNode | null): TreeNodeInfo {\n    const info: TreeNodeInfo = {\n      node: null,\n      parent: null,\n    };\n\n    if (root !== null) {\n      info.node = root;\n\n      while (info.node.left !== null) {\n        info.parent = info.node;\n        info.node = info.node.left;\n      }\n    }\n\n    return info;\n  }\n\n  /**\n   * Max node funection returns the mac node and its parent.\n   * @param root root node.\n   * @return node info.\n   */\n  private static maxNode(root: TreeNode | null): TreeNodeInfo {\n    const info: TreeNodeInfo = {\n      node: null,\n      parent: null,\n    };\n\n    if (root !== null) {\n      info.node = root;\n\n      while (info.node.right !== null) {\n        info.parent = info.node;\n        info.node = info.node.right;\n      }\n    }\n\n    return info;\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { BinarySearchTree } from '../../helper/binarySearchTree';\n\n/**\n * Moving max for the given period.\n * @param period window period.\n * @param values values array.\n * @return moving max.\n */\nexport function mmax(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  const bst = new BinarySearchTree();\n\n  for (let i = 0; i < values.length; i++) {\n    bst.insert(values[i]);\n\n    if (i >= period) {\n      bst.remove(values[i - period]);\n    }\n\n    result[i] = bst.max();\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { BinarySearchTree } from '../../helper/binarySearchTree';\n\n/**\n * Moving min for the given period.\n * @param period window period.\n * @param values values array.\n * @return moving min.\n */\nexport function mmin(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  const bst = new BinarySearchTree();\n\n  for (let i = 0; i < values.length; i++) {\n    bst.insert(values[i]);\n\n    if (i >= period) {\n      bst.remove(values[i - period]);\n    }\n\n    result[i] = bst.min();\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  checkSameLength,\n  divideBy,\n  shiftRightBy,\n} from '../../helper/numArray';\nimport { mmax } from '../trend/mmax';\nimport { mmin } from '../trend/mmin';\n\n/**\n * Ichimoku cloud result object.\n */\nexport interface IchimokuCloudResult {\n  conversionLine: number[];\n  baseLine: number[];\n  leadingSpanA: number[];\n  leadingSpanB: number[];\n  laggingSpan: number[];\n}\n\n/**\n * Ichimoku Cloud. Also known as Ichimoku Kinko Hyo, is a versatile indicator\n * that defines support and resistence, identifies trend direction, gauges\n * momentum, and provides trading signals.\n *\n * Tenkan-sen (Conversion Line) = (9-Period High + 9-Period Low) / 2\n * Kijun-sen (Base Line) = (26-Period High + 26-Period Low) / 2\n * Senkou Span A (Leading Span A) = (Conversion Line + Base Line) / 2\n * Senkou Span B (Leading Span B) = (52-Period High + 52-Period Low) / 2\n * Chikou Span (Lagging Span) = Closing plotted 26 days in the past.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return ichimoku cloud result object.\n */\nexport function ichimokuCloud(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): IchimokuCloudResult {\n  checkSameLength(highs, lows, closings);\n\n  const conversionLine = divideBy(2, add(mmax(9, highs), mmin(9, lows)));\n  const baseLine = divideBy(2, add(mmax(26, highs), mmin(26, lows)));\n  const leadingSpanA = divideBy(2, add(conversionLine, baseLine));\n  const leadingSpanB = divideBy(2, add(mmax(52, highs), mmin(52, lows)));\n  const laggingSpan = shiftRightBy(26, closings);\n\n  return {\n    conversionLine,\n    baseLine,\n    leadingSpanA,\n    leadingSpanB,\n    laggingSpan,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { ichimokuCloud } from '../../indicator/momentum/ichimokuCloud';\n\n/**\n * Ichimoku cloud.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function ichimokuCloudStrategy(asset: Asset): Action[] {\n  const indicator = ichimokuCloud(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<Action>(indicator.baseLine.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.leadingSpanA[i] > indicator.leadingSpanB[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.leadingSpanA[i] < indicator.leadingSpanB[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Rolling moving average (RMA).\n *\n * R[0] to R[p-1] is SMA(values)\n * R[p] and after is R[i] = ((R[i-1]*(p-1)) + v[i]) / p\n *\n * @param period window period.\n * @param values values array.\n * @returns RMA values.\n */\nexport function rma(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    let count = i + 1;\n\n    if (i < period) {\n      sum += values[i];\n    } else {\n      sum = result[i - 1] * (period - 1) + values[i];\n      count = period;\n    }\n\n    result[i] = sum / count;\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { rma } from '../trend/rma';\n\n/**\n * Custom RSI. It is a momentum indicator that measures the magnitude of\n * recent price changes to evaluate overbought and oversold conditions\n * using the given window period.\n *\n * RS = Average Gain / Average Loss\n * RSI = 100 - (100 / (1 + RS))\n *\n * @param period window period.\n * @param closings closing values.\n * @return rsi values.\n */\nexport function customRsi(period: number, closings: number[]): number[] {\n  const gains = new Array<number>(closings.length);\n  const losses = new Array<number>(closings.length);\n\n  gains[0] = losses[0] = 0;\n\n  for (let i = 1; i < closings.length; i++) {\n    const difference = closings[i] - closings[i - 1];\n\n    if (difference > 0) {\n      gains[i] = difference;\n      losses[i] = 0;\n    } else {\n      losses[i] = -difference;\n      gains[i] = 0;\n    }\n  }\n\n  const meanGains = rma(period, gains);\n  const meanLosses = rma(period, losses);\n\n  const r = new Array<number>(closings.length);\n  const rs = new Array<number>(closings.length);\n\n  r[0] = rs[0] = 0;\n\n  for (let i = 1; i < closings.length; i++) {\n    rs[i] = meanGains[i] / meanLosses[i];\n    r[i] = 100 - 100 / (1 + rs[i]);\n  }\n\n  return r;\n}\n\n/**\n * Relative Strength Index (RSI). It is a momentum indicator that measures\n * the magnitude of recent price changes to evaluate overbought and\n * oversold conditions using the window period of 14.\n *\n * RS = Average Gain / Average Loss\n * RSI = 100 - (100 / (1 + RS))\n *\n * @param closings closing values.\n * @return rsi values.\n */\nexport function rsi(closings: number[]): number[] {\n  return customRsi(14, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { customRsi } from './rsi';\n\n/**\n * RSI with 2 period, a mean-reversion trading strategy developed by Larry Connors.\n *\n * @param closings closing values.\n * @returns rsi values.\n */\nexport function rsi2(closings: number[]): number[] {\n  return customRsi(2, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { rsi2 } from '../../indicator/momentum/rsi2';\n\n/**\n * RSI 2. When 2-period RSI moves below 10, it is considered deeply oversold,\n * and the other way around when moves above 90.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function rsi2Strategy(asset: Asset): Action[] {\n  const indicator = rsi2(asset.closings);\n\n  const actions = new Array<Action>(indicator.length);\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator[i] < 10) {\n      actions[i] = Action.BUY;\n    } else if (indicator[i] > 90) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmin } from '../trend/mmin';\nimport { mmax } from '../trend/mmax';\nimport { sma } from '../trend/sma';\n\n/**\n * Stochastic oscillator result object.\n */\nexport interface StochasticOscillator {\n  k: number[];\n  d: number[];\n}\n\n/**\n * Stochastic Oscillator. It is a momentum indicator that shows the\n * location of the closing relative to high-low range over a\n * set number of periods.\n *\n * K = (Closing - Lowest Low) / (Highest High - Lowest Low) * 100\n * D = 3-Period SMA of K\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return stochastic oscillator result object.\n */\nexport function stochasticOscillator(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): StochasticOscillator {\n  const highestHigh14 = mmax(14, highs);\n  const lowestLow14 = mmin(14, lows);\n\n  const k = multiplyBy(\n    100,\n    divide(\n      subtract(closings, lowestLow14),\n      subtract(highestHigh14, lowestLow14)\n    )\n  );\n\n  const d = sma(3, k);\n\n  return {\n    k,\n    d,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { stochasticOscillator } from '../../indicator/momentum/stochasticOscillator';\n\n/**\n * Stochastic oscillator strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function stochasticOscillatorStrategy(asset: Asset): Action[] {\n  const so = stochasticOscillator(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<Action>(so.k.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (so.k[i] >= 80 && so.d[i] >= 80) {\n      actions[i] = Action.SELL;\n    } else if (so.k[i] <= 20 && so.d[i] <= 20) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmax } from '../trend/mmax';\nimport { mmin } from '../trend/mmin';\n\nconst PERIOD = 14;\n\n/**\n * Williams R. Determine overbought and oversold.\n *\n * WR = (Highest High - Closing) / (Highest High - Lowest Low) * -100.\n *\n * Buy when -80 and below. Sell when -20 and above.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return wr values.\n */\nexport function williamsR(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  const highestHigh = mmax(PERIOD, highs);\n  const lowestLow = mmin(PERIOD, lows);\n  return multiplyBy(\n    -100,\n    divide(subtract(highestHigh, closings), subtract(highestHigh, lowestLow))\n  );\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { williamsR } from '../../indicator/momentum/williamsR';\n\n/**\n * Williams R strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function williamsRStrategy(asset: Asset): Action[] {\n  const wr = williamsR(asset.highs, asset.lows, asset.closings);\n\n  return wr.map((value) => {\n    if (value <= -80) {\n      return Action.BUY;\n    } else if (value >= -20) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Exponential moving average (EMA).\n * @param period window period.\n * @param values values array.\n * @return EMA values.\n */\nexport function ema(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  if (result.length > 0) {\n    const k = 2 / (1 + period);\n    const m = 1 - k;\n\n    result[0] = values[0];\n\n    for (let i = 1; i < result.length; i++) {\n      result[i] = values[i] * k + result[i - 1] * m;\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from './ema';\n\n/**\n * Absolute Price Oscillator (APO) function calculates the technical indicator\n * that is used to follow trends. APO crossing above zero indicates bullish,\n * while crossing below zero indicates bearish. Positive value is upward\n * trend, while negative value is downward trend.\n *\n * Fast = EMA(fastPeriod, values)\n * Slow = EMA(slowPeriod, values)\n * APO = Fast - Slow\n *\n * @param fastPeriod fast period.\n * @param slowPeriod slow period.\n * @param values values array.\n * @return apo array.\n */\nexport function absolutePriceOscillator(\n  fastPeriod: number,\n  slowPeriod: number,\n  values: number[]\n): number[] {\n  const fast = ema(fastPeriod, values);\n  const slow = ema(slowPeriod, values);\n  const apo = subtract(fast, slow);\n  return apo;\n}\n\n/**\n * Default APO function calculates APO with frequently used fast period 14,\n * and slow period 30.\n * @param values values array.\n * @return apo array.\n */\nexport function defaultAbsolutePriceOscillator(values: number[]): number[] {\n  return absolutePriceOscillator(14, 30, values);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport {\n  absolutePriceOscillator,\n  defaultAbsolutePriceOscillator,\n} from '../../indicator/trend/absolutePriceOscillator';\n\n/**\n * Runs the APO strategy based on the indicator.\n *\n * @param indicator APO indicator.\n * @return strategy actions.\n */\nfunction runStrategy(indicator: number[]): Action[] {\n  const result = new Array<number>(indicator.length);\n\n  for (let i = 0; i < result.length; i++) {\n    if (indicator[i] > 0) {\n      result[i] = Action.BUY;\n    } else if (indicator[i] < 0) {\n      result[i] = Action.SELL;\n    } else {\n      result[i] = Action.HOLD;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Absolute Price Oscillator (APO) strategy function.\n *\n * @param fastPeriod fast period.\n * @param slowPeriod slow period.\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function absolutePriceOscillatorStrategy(\n  fastPeriod: number,\n  slowPeriod: number,\n  asset: Asset\n): Action[] {\n  return runStrategy(\n    absolutePriceOscillator(fastPeriod, slowPeriod, asset.closings)\n  );\n}\n\n/**\n * Default Absolute Price Oscillator (APO) strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function defaultAbsolutePriceOscillatorStrategy(asset: Asset): Action[] {\n  return runStrategy(defaultAbsolutePriceOscillator(asset.closings));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Since value is changed.\n * @param values values array.\n * @return since changed.\n */\nexport function since(values: number[]): number[] {\n  const result = new Array<number>(values.length);\n\n  if (values.length > 0) {\n    let last = null;\n    let count = 0;\n\n    for (let i = 0; i < values.length; i++) {\n      if (last !== values[i]) {\n        last = values[i];\n        count = 0;\n      } else {\n        count++;\n      }\n\n      result[i] = count;\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  addBy,\n  checkSameLength,\n  divideBy,\n  multiplyBy,\n} from '../../helper/numArray';\nimport { since } from './since';\nimport { mmin } from './mmin';\nimport { mmax } from './mmax';\n\n/**\n * Aroon period.\n */\nconst AROON_PERIOD = 25;\n\n/**\n * Aroon result.\n */\nexport interface AroonResult {\n  up: number[];\n  down: number[];\n}\n\n/**\n * Aroon Indicator. It is a technical indicator that is used to identify trend changes\n * in the price of a stock, as well as the strength of that trend. It consists of two\n * lines, Arron Up, and Aroon Down. The Aroon Up line measures the strength of the\n * uptrend, and the Aroon Down measures the strength of the downtrend. When Aroon Up\n * is above Aroon Down, it indicates bullish price, and when Aroon Down is above\n * Aroon Up, it indicates bearish price.\n *\n * Aroon Up = ((25 - Period Since Last 25 Period High) / 25) * 100\n * Aroon Down = ((25 - Period Since Last 25 Period Low) / 25) * 100\n *\n * @param highs highs values.\n * @param lows lows values.\n * @return aroon result.\n */\nexport function aroon(highs: number[], lows: number[]): AroonResult {\n  checkSameLength(highs, lows);\n\n  const sinceLastHigh = since(mmax(AROON_PERIOD, highs));\n  const sinceLastLow = since(mmin(AROON_PERIOD, lows));\n\n  const up = multiplyBy(\n    100,\n    divideBy(AROON_PERIOD, addBy(AROON_PERIOD, multiplyBy(-1, sinceLastHigh)))\n  );\n\n  const down = multiplyBy(\n    100,\n    divideBy(AROON_PERIOD, addBy(AROON_PERIOD, multiplyBy(-1, sinceLastLow)))\n  );\n\n  return {\n    up,\n    down,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { aroon } from '../../indicator/trend/aroon';\n\n/**\n * Aroon strategy.\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function aroonStrategy(asset: Asset): Action[] {\n  const indicator = aroon(asset.highs, asset.lows);\n\n  const actions = new Array<Action>(indicator.up.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.up[i] > indicator.down[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.down[i] > indicator.up[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\n\n/**\n * The Balance of Power (BOP) function calculates the strength of buying and\n * selling pressure. Positive value indicates an upward trend, and negative\n * value indicates a downward trend. Zero indicates a balance between\n * the two.\n *\n * BOP = (Closing - Opening) / (High - Low)\n *\n * @param openings opening values.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return balance of power values.\n */\nexport function balanceOfPower(\n  openings: number[],\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  return divide(subtract(closings, openings), subtract(highs, lows));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { balanceOfPower } from '../../indicator/trend/balanceOfPower';\n\n/**\n * Balance of power strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function balanceOfPowerStrategy(asset: Asset): Action[] {\n  const bop = balanceOfPower(\n    asset.openings,\n    asset.highs,\n    asset.lows,\n    asset.closings\n  );\n\n  return bop.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, addBy, checkSameLength, multiply, multiplyBy } from './numArray';\n\n/**\n * Least square result object.\n */\nexport interface LeastSquareResult {\n  m: number;\n  b: number;\n}\n\n/**\n * Moving least square result.\n */\nexport interface MovingLeastSquareResult {\n  m: number[];\n  b: number[];\n}\n\n/**\n * Least square.\n *\n * y = mx + b\n * b = y-intercept\n * y = slope\n *\n * m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n * b = (sumY - m * sumX) / n\n *\n * @param x x values.\n * @param y y values.\n * @return least square result object.\n */\nexport function leastSquare(x: number[], y: number[]): LeastSquareResult {\n  checkSameLength(x, y);\n\n  let sumX = 0;\n  let sumX2 = 0;\n  let sumY = 0;\n  let sumXY = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    sumX += x[i];\n    sumX2 += x[i] * x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n  }\n\n  const n = x.length;\n  const m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n  const b = (sumY - m * sumX) / n;\n\n  return {\n    m,\n    b,\n  };\n}\n\n/**\n * Moving least square over a period.\n *\n * y = mx + b\n * b = y-intercept\n * y = slope\n *\n * m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n * b = (sumY - m * sumX) / n\n *\n * @param period window period.\n * @param x x values.\n * @param y y values.\n * @return moving least square result.\n */\nexport function movingLeastSquare(\n  period: number,\n  x: number[],\n  y: number[]\n): MovingLeastSquareResult {\n  checkSameLength(x, y);\n\n  const m = new Array<number>(x.length);\n  const b = new Array<number>(x.length);\n\n  let sumX = 0;\n  let sumX2 = 0;\n  let sumY = 0;\n  let sumXY = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    sumX += x[i];\n    sumX2 += x[i] * x[i];\n    sumY += y[i];\n    sumXY += x[i] * y[i];\n\n    let n = i + 1;\n\n    if (i >= period) {\n      sumX -= x[i - period];\n      sumX2 -= x[i - period] * x[i - period];\n      sumY -= y[i - period];\n      sumXY -= x[i - period] * y[i - period];\n      n = period;\n    }\n\n    if (i > 0) {\n      m[i] = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n      b[i] = (sumY - m[i] * sumX) / n;\n    } else {\n      m[i] = 0;\n      b[i] = 0;\n    }\n  }\n\n  return {\n    m,\n    b,\n  };\n}\n\n/**\n * Linear regression using least square method.\n *\n * y = mx + b\n *\n * @param x x values.\n * @param y y values.\n * @return regression values.\n */\nexport function linearRegressionUsingLeastSquare(\n  x: number[],\n  y: number[]\n): number[] {\n  const ls = leastSquare(x, y);\n  const lr = addBy(ls.b, multiplyBy(ls.m, x));\n  return lr;\n}\n\n/**\n * Moving linear regression using least square.\n *\n * y = mx + b\n *\n * @param period window period.\n * @param x x values.\n * @param y y values.\n * @return regression values.\n */\nexport function movingLinearRegressionUsingLeastSquare(\n  period: number,\n  x: number[],\n  y: number[]\n): number[] {\n  const ls = movingLeastSquare(period, x, y);\n  const lr = add(multiply(ls.m, x), ls.b);\n  return lr;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  generateNumbers,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport {\n  linearRegressionUsingLeastSquare,\n  movingLinearRegressionUsingLeastSquare,\n} from '../../helper/regression';\n\n/**\n * The Chande Forecast Oscillator developed by Tushar Chande The Forecast\n * Oscillator plots the percentage difference between the closing price and\n * the n-period linear regression forecasted price. The oscillator is above\n * zero when the forecast price is greater than the closing price and less\n * than zero if it is below.\n *\n * R = Linreg(Closing)\n * CFO = ((Closing - R) / Closing) * 100\n *\n * @param closings closing values.\n * @return cfo values.\n */\nexport function chandeForecastOscillator(closings: number[]): number[] {\n  const x = generateNumbers(0, closings.length, 1);\n  const r = linearRegressionUsingLeastSquare(x, closings);\n  const cfo = multiplyBy(100, divide(subtract(closings, r), closings));\n  return cfo;\n}\n\n/**\n * Moving Chande Forecast Oscillator calculates based on\n * the given period.\n *\n * The Chande Forecast Oscillator developed by Tushar Chande The Forecast\n * Oscillator plots the percentage difference between the closing price and\n * the n-period linear regression forecasted price. The oscillator is above\n * zero when the forecast price is greater than the closing price and less\n * than zero if it is below.\n *\n * R = Linreg(Closing)\n * CFO = ((Closing - R) / Closing) * 100\n *\n * @param period window period.\n * @param closings closing values.\n * @return moving cfo.\n */\nexport function movingChandeForecastOscillator(\n  period: number,\n  closings: number[]\n): number[] {\n  const x = generateNumbers(0, closings.length, 1);\n  const r = movingLinearRegressionUsingLeastSquare(period, x, closings);\n  const cfo = multiplyBy(100, divide(subtract(closings, r), closings));\n  return cfo;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { chandeForecastOscillator } from '../../indicator/trend/chandeForecastOscillator';\n\n/**\n * Chande forecast oscillator strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function chandeForecastOscillatorStrategy(asset: Asset): Action[] {\n  const cfo = chandeForecastOscillator(asset.closings);\n\n  return cfo.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmin } from './mmin';\nimport { mmax } from './mmax';\nimport { sma } from './sma';\n\n/**\n * KDJ result.\n */\nexport interface KdjResult {\n  k: number[];\n  d: number[];\n  j: number[];\n}\n\n/**\n * The kdj function calculates the KDJ  indicator, also known as\n * the Random Index. KDJ is calculated similar to the Stochastic\n * Oscillator with the difference of having the J line. It is\n * used to analyze the trend and entry points.\n *\n * The K and D lines show if the asset is overbought when they\n * crosses above 80%, and oversold when they crosses below\n * 20%. The J line represents the divergence.\n *\n * RSV = ((Closing - Min(Low, rPeriod))\n *       / (Max(High, rPeriod) - Min(Low, rPeriod))) * 100\n * K = Sma(RSV, kPeriod)\n * D = Sma(K, dPeriod)\n * J = (3 * K) - (2 * D)\n *\n * @param rPeriod r period.\n * @param kPeriod k period.\n * @param dPeriod d period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return kdj result.\n */\nexport function kdj(\n  rPeriod: number,\n  kPeriod: number,\n  dPeriod: number,\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): KdjResult {\n  const highest = mmax(rPeriod, highs);\n  const lowest = mmin(rPeriod, lows);\n\n  const rsv = multiplyBy(\n    100,\n    divide(subtract(closings, lowest), subtract(highest, lowest))\n  );\n\n  const k = sma(kPeriod, rsv);\n  const d = sma(dPeriod, k);\n  const j = subtract(multiplyBy(3, k), multiplyBy(2, d));\n\n  return {\n    k,\n    d,\n    j,\n  };\n}\n\n/**\n * The defaultKdj function calculates KDJ based on default periods\n * consisting of rPeriod of 9, kPeriod of 3, and dPeriod of 3.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return kdj result.\n */\nexport function defaultKdj(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): KdjResult {\n  return kdj(9, 3, 3, highs, lows, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { defaultKdj } from '../../indicator/trend/kdj';\n\n/**\n * KDJ strategy.\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function kdjStrategy(asset: Asset): Action[] {\n  const kdjResult = defaultKdj(asset.highs, asset.lows, asset.closings);\n  const actions = new Array<Action>(kdjResult.k.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (kdjResult.k[i] > kdjResult.d[i] && kdjResult.k[i] <= 20) {\n      actions[i] = Action.BUY;\n    } else if (kdjResult.k[i] < kdjResult.d[i] && kdjResult.k[i] >= 80) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from './ema';\n\nexport interface MacdResult {\n  macdLine: number[];\n  signalLine: number[];\n}\n\n/**\n * Moving Average Convergence Divergence (MACD).\n *\n * MACD = 12-Period EMA - 26-Period EMA.\n * Signal = 9-Period EMA of MACD.\n *\n * @param closings closing values.\n * @return macd result.\n */\nexport function macd(closings: number[]): MacdResult {\n  const ema12 = ema(12, closings);\n  const ema26 = ema(26, closings);\n\n  const macdLine = subtract(ema12, ema26);\n  const signalLine = ema(9, macdLine);\n\n  return {\n    macdLine,\n    signalLine,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { macd } from '../../indicator/trend/macd';\n\n/**\n * MACD strategy.\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function macdStrategy(asset: Asset): Action[] {\n  const macdResult = macd(asset.closings);\n  const actions = new Array<number>(macdResult.macdLine.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (macdResult.macdLine[i] > macdResult.signalLine[i]) {\n      actions[i] = Action.BUY;\n    } else if (macdResult.macdLine[i] < macdResult.signalLine[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Indicator trend.\n */\nexport enum Trend {\n  FALLING = -1,\n  STABLE = 0,\n  RISING = 1,\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\nimport { Trend } from '../trend';\n\nconst PSAR_AF_STEP = 0.02;\nconst PSAR_AF_MAX = 0.2;\n\n/**\n * Parabolic SAR result object.\n */\nexport interface ParabolicSar {\n  trends: Trend[];\n  psar: number[];\n}\n\n/**\n * Parabolic SAR. It is a popular technical indicator for identifying the trend\n * and as a trailing stop.\n *\n * PSAR = PSAR[i - 1] - ((PSAR[i - 1] - EP) * AF)\n *\n * If the trend is Falling:\n *  - PSAR is the maximum of PSAR or the previous two high values.\n *  - If the current high is greather than or equals to PSAR, use EP.\n *\n * If the trend is Rising:\n *  - PSAR is the minimum of PSAR or the previous two low values.\n *  - If the current low is less than or equals to PSAR, use EP.\n *\n * If PSAR is greater than the closing, trend is falling, and the EP\n * is set to the minimum of EP or the low.\n *\n * If PSAR is lower than or equals to the closing, trend is rising, and the EP\n * is set to the maximum of EP or the high.\n *\n * If the trend is the same, and AF is less than 0.20, increment it by 0.02.\n * If the trend is not the same, set AF to 0.02.\n *\n * Based on video https://www.youtube.com/watch?v=MuEpGBAH7pw&t=0s.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return psar result.\n */\nexport function parabolicSar(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): ParabolicSar {\n  checkSameLength(highs, lows, closings);\n\n  const trends = new Array<Trend>(highs.length);\n  const psar = new Array<number>(highs.length);\n\n  trends[0] = Trend.FALLING;\n  psar[0] = highs[0];\n\n  let af = PSAR_AF_STEP;\n  let ep = lows[0];\n\n  for (let i = 1; i < psar.length; i++) {\n    psar[i] = psar[i - 1] - (psar[i - 1] - ep) * af;\n\n    if (trends[i - 1] === Trend.FALLING) {\n      psar[i] = Math.max(psar[i], highs[i - 1]);\n      if (i > 1) {\n        psar[i] = Math.max(psar[i], highs[i - 2]);\n      }\n\n      if (highs[i] >= psar[i]) {\n        psar[i] = ep;\n      }\n    } else {\n      psar[i] = Math.min(psar[i], lows[i - 1]);\n      if (i > 1) {\n        psar[i] = Math.min(psar[i], lows[i - 2]);\n      }\n\n      if (lows[i] <= psar[i]) {\n        psar[i] = ep;\n      }\n    }\n\n    const prevEp = ep;\n\n    if (psar[i] > closings[i]) {\n      trends[i] = Trend.FALLING;\n      ep = Math.min(ep, lows[i]);\n    } else {\n      trends[i] = Trend.RISING;\n      ep = Math.max(ep, highs[i]);\n    }\n\n    if (trends[i] !== trends[i - 1]) {\n      af = PSAR_AF_STEP;\n    } else if (prevEp !== ep && af < PSAR_AF_MAX) {\n      af += PSAR_AF_STEP;\n    }\n  }\n\n  return {\n    trends,\n    psar,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { parabolicSar } from '../../indicator/trend/parabolicSar';\nimport { Trend } from '../../indicator/trend';\n\n/**\n * Parabolic SAR strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function parabolicSarStrategy(asset: Asset): Action[] {\n  const psar = parabolicSar(asset.highs, asset.lows, asset.closings);\n\n  return psar.trends.map((trend) => {\n    switch (trend) {\n      case Trend.FALLING:\n        return Action.SELL;\n      case Trend.RISING:\n        return Action.BUY;\n      case Trend.STABLE:\n        return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy } from '../../helper/numArray';\n\n/**\n * The Typical Price. It is another approximation of\n * average price for each period and can be used as\n * a filter for moving average systems.\n *\n * TPI = (High + Low + Closing) / 3\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return tpi values.\n */\nexport function typicalPrice(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  return divideBy(3, add(add(highs, lows), closings));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { typicalPrice } from '../../indicator/trend/typicalPrice';\n\n/**\n * Typical price strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function typicalPriceStrategy(asset: Asset): Action[] {\n  const tpi = typicalPrice(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<Action>(tpi.length);\n  actions[0] = Action.HOLD;\n\n  for (let i = 1; i < actions.length; i++) {\n    if (tpi[i] > tpi[i - 1]) {\n      actions[i] = Action.BUY;\n    } else if (tpi[i] < tpi[i - 1]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Moving sum of the given values.\n * @param period window period.\n * @param values values array.\n * @return sum values.\n */\nexport function msum(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n\n    if (i >= period) {\n      sum -= values[i - period];\n    }\n\n    result[i] = sum;\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  abs,\n  checkSameLength,\n  divide,\n  max,\n  shiftRightBy,\n  subtract,\n} from '../../helper/numArray';\nimport { msum } from './msum';\n\nconst VORTEX_PERIOD = 14;\n\n/**\n * Vortex result.\n */\nexport interface VortexResult {\n  plusVi: number[];\n  minusVi: number[];\n}\n\n/**\n * Vortex Indicator. It provides two oscillators that capture positive and\n * negative trend movement. A bullish signal triggers when the positive\n * trend indicator crosses above the negative trend indicator or a key\n * level. A bearish signal triggers when the negative trend indicator\n * crosses above the positive trend indicator or a key level.\n *\n * +VM = Abs(Current High - Prior Low)\n * -VM = Abs(Current Low - Prior High)\n *\n * +VM14 = 14-Period Sum of +VM\n * -VM14 = 14-Period Sum of -VM\n *\n * TR = Max((High[i]-Low[i]), Abs(High[i]-Closing[i-1]), Abs(Low[i]-Closing[i-1]))\n * TR14 = 14-Period Sum of TR\n *\n * +VI14 = +VM14 / TR14\n * -VI14 = -VM14 / TR14\n *\n * Based on https://school.stockcharts.com/doku.php?id=technical_indicators:vortex_indicator\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return vortex result.\n */\nexport function vortex(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): VortexResult {\n  checkSameLength(highs, lows, closings);\n\n  const prevClosings = shiftRightBy(1, closings);\n\n  const plusVm = abs(subtract(highs, shiftRightBy(1, lows)));\n  const minusVm = abs(subtract(lows, shiftRightBy(1, highs)));\n\n  const plusVmSum = msum(VORTEX_PERIOD, plusVm);\n  const minusVmSum = msum(VORTEX_PERIOD, minusVm);\n\n  const tr = max(\n    subtract(highs, lows),\n    abs(subtract(highs, prevClosings)),\n    abs(subtract(lows, prevClosings))\n  );\n\n  const trSum = msum(VORTEX_PERIOD, tr);\n\n  const plusVi = divide(plusVmSum, trSum);\n  const minusVi = divide(minusVmSum, trSum);\n\n  return {\n    plusVi,\n    minusVi,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { vortex } from '../../indicator/trend/vortex';\n\n/**\n * Vortex strategy.\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function vortexStrategy(asset: Asset): Action[] {\n  const indicator = vortex(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<Action>(indicator.plusVi.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (indicator.plusVi[i] > indicator.minusVi[i]) {\n      actions[i] = Action.BUY;\n    } else if (indicator.plusVi[i] < indicator.minusVi[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  addBy,\n  checkSameLength,\n  divide,\n  multiply,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport { sma } from '../trend/sma';\n\n/**\n * Acceleration bands result object.\n */\nexport interface AccelerationBands {\n  upperBand: number[];\n  middleBand: number[];\n  lowerBand: number[];\n}\n\n/**\n * Acceleration Bands. Plots upper and lower envelope bands\n * around a simple moving average.\n *\n * Upper Band = SMA(High * (1 + 4 * (High - Low) / (High + Low)))\n * Middle Band = SMA(Closing)\n * Lower Band = SMA(Low * (1 - 4 * (High - Low) / (High + Low)))\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return acceleration band.\n */\nexport function accelerationBands(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): AccelerationBands {\n  checkSameLength(highs, lows, closings);\n\n  const k = divide(subtract(highs, lows), add(highs, lows));\n\n  const upperBand = sma(20, multiply(highs, addBy(1, multiplyBy(4, k))));\n  const middleBand = sma(20, closings);\n  const lowerBand = sma(20, multiply(lows, addBy(1, multiplyBy(-4, k))));\n\n  return {\n    upperBand,\n    middleBand,\n    lowerBand,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { accelerationBands } from '../../indicator/volatility/accelerationBands';\n\n/**\n * Acceleration bands strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function accelerationBandsStrategy(asset: Asset): Action[] {\n  const ab = accelerationBands(asset.highs, asset.lows, asset.closings);\n\n  const actions = new Array<number>(ab.upperBand.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (asset.closings[i] >= ab.upperBand[i]) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.SELL;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { sma } from '../trend/sma';\n\n/**\n * Moving strandard deviation function.\n *\n * @param period window period.\n * @param values value array.\n * @return std values.\n */\nexport function mstd(period: number, values: number[]): number[] {\n  const result = new Array<number>(values.length);\n  const averages = sma(period, values);\n\n  for (let i = 0; i < values.length; i++) {\n    result[i] = 0;\n\n    if (i >= period - 1) {\n      let sum = 0;\n\n      for (let k = i - (period - 1); k <= i; k++) {\n        sum += (values[k] - averages[i]) * (values[k] - averages[i]);\n      }\n\n      result[i] = Math.sqrt(sum / period);\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { sma } from '../trend/sma';\nimport { mstd } from './mstd';\n\nconst BB_PERIOD = 20;\n\n/**\n * Bollinger bands result object.\n */\nexport interface BollingerBands {\n  upperBand: number[];\n  middleBand: number[];\n  lowerBand: number[];\n}\n\n/**\n * Bollinger Bands.\n *\n * Middle Band = 20-Period SMA.\n * Upper Band = 20-Period SMA + 2 (20-Period Std)\n * Lower Band = 20-Period SMA - 2 (20-Period Std)\n *\n * @param closings closing values.\n * @return bollinger bands.\n */\nexport function bollingerBands(closings: number[]): BollingerBands {\n  const std2 = multiplyBy(2, mstd(BB_PERIOD, closings));\n  const middleBand = sma(BB_PERIOD, closings);\n  const upperBand = add(middleBand, std2);\n  const lowerBand = subtract(middleBand, std2);\n\n  return {\n    upperBand,\n    middleBand,\n    lowerBand,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { bollingerBands } from '../../indicator/volatility/bollingerBands';\n\n/**\n * Bollinger bands strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function bollingerBandsStrategy(asset: Asset): Action[] {\n  const bb = bollingerBands(asset.closings);\n\n  const actions = new Array<Action>(bb.upperBand.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (asset.closings[i] > bb.upperBand[i]) {\n      actions[i] = Action.SELL;\n    } else if (asset.closings[i] < bb.lowerBand[i]) {\n      actions[i] = Action.BUY;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  divide,\n  generateNumbers,\n  multiply,\n  multiplyBy,\n  subtract,\n} from '../../helper/numArray';\nimport { movingLeastSquare } from '../../helper/regression';\nimport { ema } from '../trend/ema';\nimport { mmax } from '../trend/mmax';\nimport { mmin } from '../trend/mmin';\n\n/**\n * Projection oscillator result object.\n */\nexport interface ProjectionOscillator {\n  po: number[];\n  spo: number[];\n}\n\n/**\n * ProjectionOscillator calculates the Projection Oscillator (PO). The PO\n * uses the linear regression slope, along with highs and lows.\n *\n * Period defines the moving window to calculates the PO, and the smooth\n * period defines the moving windows to take EMA of PO.\n *\n * PL = Min(period, (high + MLS(period, x, high)))\n * PU = Max(period, (low + MLS(period, x, low)))\n * PO = 100 * (Closing - PL) / (PU - PL)\n * SPO = EMA(smooth, PO)\n *\n * @param period window period.\n * @param smooth smooth period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return projection oscillator.\n */\nexport function projectionOscillator(\n  period: number,\n  smooth: number,\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): ProjectionOscillator {\n  const x = generateNumbers(0, closings.length, 1);\n  const lsHighs = movingLeastSquare(period, x, highs);\n  const lsLows = movingLeastSquare(period, x, lows);\n\n  const vHighs = add(highs, multiply(lsHighs.m, x));\n  const vLows = add(lows, multiply(lsLows.m, x));\n\n  const pu = mmax(period, vHighs);\n  const pl = mmin(period, vLows);\n\n  const po = divide(multiplyBy(100, subtract(closings, pl)), subtract(pu, pl));\n  const spo = ema(smooth, po);\n\n  return {\n    po,\n    spo,\n  };\n}\n\n/**\n * Default projection oscillator function.\n * @param highs high values.\n * @param lows lows values.\n * @param closings closing values.\n * @return projection oscillator.\n */\nexport function defaultProjectionOscillator(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): ProjectionOscillator {\n  return projectionOscillator(14, 3, highs, lows, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { defaultProjectionOscillator } from '../../indicator/volatility/projectionOscillator';\n\n/**\n * Projection oscillator strategy function.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function projectionOscillatorStrategy(asset: Asset): Action[] {\n  const po = defaultProjectionOscillator(\n    asset.highs,\n    asset.lows,\n    asset.closings\n  );\n\n  const actions = new Array<Action>(po.po.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (po.po[i] > po.spo[i]) {\n      actions[i] = Action.BUY;\n    } else if (po.po[i] < po.spo[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply, subtract } from '../../helper/numArray';\nimport { msum } from '../trend/msum';\n\n/**\n * Default period of CMF.\n */\nexport const CMF_DEFAULT_PERIOD = 20;\n\n/**\n * The Chaikin Money Flow (CMF) measures the amount of money flow volume\n * over a given period.\n *\n * Money Flow Multiplier = ((Closing - Low) - (High - Closing)) / (High - Low)\n * Money Flow Volume = Money Flow Multiplier * Volume\n * Chaikin Money Flow = Sum(20, Money Flow Volume) / Sum(20, Volume)\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @returns cmf values.\n */\nexport function chaikinMoneyFlow(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[]\n): number[] {\n  const moneyFlowMultipler = divide(\n    subtract(subtract(closings, lows), subtract(highs, closings)),\n    subtract(highs, lows)\n  );\n\n  const moneyFlowVolume = multiply(moneyFlowMultipler, volumes);\n\n  const cmf = divide(\n    msum(CMF_DEFAULT_PERIOD, moneyFlowVolume),\n    msum(CMF_DEFAULT_PERIOD, volumes)\n  );\n\n  return cmf;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { chaikinMoneyFlow } from '../../indicator/volume/chaikinMoneyFlow';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * The chaikin money flow strategy uses the cmf values that are generated\n * by the Chaikin Money Flow (CMF) indicator function to provide a BUY\n * action when cmf is less than zero, a SELL action when cmf is\n * greather than zero, a HOLD action otherwise.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function chaikinMoneyFlowStrategy(asset: Asset): Action[] {\n  const cmf = chaikinMoneyFlow(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    asset.volumes\n  );\n\n  return cmf.map((value) => {\n    if (value < 0) {\n      return Action.BUY;\n    } else if (value > 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  add,\n  changes,\n  divide,\n  divideBy,\n  subtract,\n} from '../../helper/numArray';\nimport { sma } from '../trend/sma';\n\n/**\n * Default period for EMV.\n */\nexport const EMV_DEFAULT_PERIOD = 14;\n\n/**\n * The Ease of Movement (EMV) is a volume based oscillator measuring\n * the ease of price movement.\n *\n * Distance Moved = ((High + Low) / 2) - ((Priod High + Prior Low) /2)\n * Box Ratio = ((Volume / 100000000) / (High - Low))\n * EMV(1) = Distance Moved / Box Ratio\n * EMV(14) = SMA(14, EMV(1))\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param volumes volume values.\n * @return ease of movement values.\n */\nexport function easeOfMovement(\n  period: number,\n  highs: number[],\n  lows: number[],\n  volumes: number[]\n): number[] {\n  const distanceMoved = changes(1, divideBy(2, add(highs, lows)));\n  const boxRatio = divide(divideBy(100000000, volumes), subtract(highs, lows));\n  const emv = sma(period, divide(distanceMoved, boxRatio));\n  return emv;\n}\n\n/**\n * The default Ease of Movement with the default period of 14.\n *\n * @param highs high values.\n * @param lows low values.\n * @param volumes volume values.\n * @return ease of movement values.\n */\nexport function defaultEaseOfMovement(\n  highs: number[],\n  lows: number[],\n  volumes: number[]\n): number[] {\n  return easeOfMovement(EMV_DEFAULT_PERIOD, highs, lows, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { defaultEaseOfMovement } from '../../indicator/volume/easeOfMovement';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Ease of movement strategy.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function easeOfMovementStrategy(asset: Asset): Action[] {\n  const emv = defaultEaseOfMovement(asset.highs, asset.lows, asset.volumes);\n\n  return emv.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { changes, multiply } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\n\n/**\n * The Force Index (FI) uses the closing price and the volume to assess\n * the power behind a move and identify turning points.\n *\n * Force Index = EMA(period, (Current - Previous) * Volume)\n *\n * @param period window period.\n * @param closings closing values.\n * @param volumes volume values.\n * @return force index.\n */\nexport function forceIndex(\n  period: number,\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return ema(period, multiply(changes(1, closings), volumes));\n}\n\n/**\n * The default Force Index (FI) with window size of 13.\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @return force index.\n */\nexport function defaultForceIndex(\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return forceIndex(13, closings, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { defaultForceIndex } from '../../indicator/volume/forceIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Force index strategy function.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function forceIndexStrategy(asset: Asset): Action[] {\n  const fi = defaultForceIndex(asset.closings, asset.volumes);\n\n  return fi.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  addBy,\n  changes,\n  divide,\n  extractSigns,\n  multiply,\n  multiplyBy,\n  pow,\n} from '../../helper/numArray';\nimport { msum } from '../trend/msum';\nimport { typicalPrice } from '../trend/typicalPrice';\n\n/**\n * The Money Flow Index (MFI) analyzes both the closing price and the volume\n * to measure to identify overbought and oversold states. It is similar to\n * the Relative Strength Index (RSI), but it also uses the volume.\n *\n * Raw Money Flow = Typical Price * Volume\n * Money Ratio = Positive Money Flow / Negative Money Flow\n * Money Flow Index = 100 - (100 / (1 + Money Ratio))\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @return money flow index values.\n */\nexport function moneyFlowIndex(\n  period: number,\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[]\n): number[] {\n  const rawMoneyFlow = multiply(typicalPrice(highs, lows, closings), volumes);\n\n  const signs = extractSigns(changes(1, rawMoneyFlow));\n  const moneyFlow = multiply(signs, rawMoneyFlow);\n\n  const positiveMoneyFlow = moneyFlow.map((value) => (value >= 0 ? value : 0));\n  const negativeMoneyFlow = moneyFlow.map((value) => (value < 0 ? value : 0));\n\n  const moneyRatio = divide(\n    msum(period, positiveMoneyFlow),\n    msum(period, multiplyBy(-1, negativeMoneyFlow))\n  );\n\n  const moneyFlowIndex = addBy(\n    100,\n    multiplyBy(-100, pow(addBy(1, moneyRatio), -1))\n  );\n\n  return moneyFlowIndex;\n}\n\n/**\n * Default money flow index with period 14.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @return money flow index values.\n */\nexport function defaultMoneyFlowIndex(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return moneyFlowIndex(14, highs, lows, closings, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { defaultMoneyFlowIndex } from '../../indicator/volume/moneyFlowIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Money flow index strategy.\n *\n * @param asset asset object.\n * @return strategy actions.\n */\nexport function moneyFlowIndexStrategy(asset: Asset): Action[] {\n  const mfi = defaultMoneyFlowIndex(\n    asset.highs,\n    asset.lows,\n    asset.closings,\n    asset.volumes\n  );\n\n  return mfi.map((value) => {\n    if (value >= 80) {\n      return Action.SELL;\n    } else {\n      return Action.BUY;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\n\n/**\n * Starting value for NVI.\n */\nconst NVI_STARTING_VALUE = 1000;\n\n/**\n * Default period for NVI.\n */\nexport const NVI_DEFAULT_PERIOD = 255;\n\n/**\n * The Negative Volume Index (NVI) is a cumulative indicator using\n * the change in volume to decide when the smart money is active.\n *\n * If Volume is greather than Previous Volume:\n *\n *   NVI = Previous NVI\n *\n * Otherwise:\n *\n *   NVI = Previous NVI + (((Closing - Previous Closing) / Previous Closing) * Previous NVI)\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @returns nvi values.\n */\nexport function negativeVolumeIndex(\n  closings: number[],\n  volumes: number[]\n): number[] {\n  checkSameLength(closings, volumes);\n\n  const nvi = new Array<number>(closings.length);\n\n  for (let i = 0; i < nvi.length; i++) {\n    if (i === 0) {\n      nvi[i] = NVI_STARTING_VALUE;\n    } else if (volumes[i - 1] < volumes[i]) {\n      nvi[i] = nvi[i - 1];\n    } else {\n      nvi[i] =\n        nvi[i - 1] +\n        ((closings[i] - closings[i - 1]) / closings[i - 1]) * nvi[i - 1];\n    }\n  }\n\n  return nvi;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { ema } from '../../indicator/trend/ema';\nimport {\n  negativeVolumeIndex,\n  NVI_DEFAULT_PERIOD,\n} from '../../indicator/volume/negativeVolumeIndex';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * The negative volume index strategy uses the nvi values that are generated by\n * the Negative Volume Index (NVI) indicator function to provide a BUY action\n * when nvi is less than its 255-period EMA, and a SELL action when it is\n * greather than its 255-period EMA, otherwise a HOLD action.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function negativeVolumeIndexStrategy(asset: Asset): Action[] {\n  const nvi = negativeVolumeIndex(asset.closings, asset.volumes);\n\n  const nvi255 = ema(NVI_DEFAULT_PERIOD, nvi);\n\n  const actions = new Array<Action>(nvi.length);\n\n  for (let i = 0; i < actions.length; i++) {\n    if (nvi[i] < nvi255[i]) {\n      actions[i] = Action.BUY;\n    } else if (nvi[i] > nvi255[i]) {\n      actions[i] = Action.SELL;\n    } else {\n      actions[i] = Action.HOLD;\n    }\n  }\n\n  return actions;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply } from '../../helper/numArray';\nimport { msum } from '../trend/msum';\n\n/**\n * Default period for VWAP.\n */\nexport const VWAP_DEFAULT_PERIOD = 14;\n\n/**\n * The Volume Weighted Average Price (VWAP) provides the average price\n * the asset has traded.\n *\n * VWAP = Sum(Closing * Volume) / Sum(Volume)\n *\n * @param period window period.\n * @param closings closing values.\n * @param volumes volume values.\n * @returns vwap values.\n */\nexport function volumeWeightedAveragePrice(\n  period: number,\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return divide(\n    msum(period, multiply(closings, volumes)),\n    msum(period, volumes)\n  );\n}\n\n/**\n * Default volume weighted average price with period of 14.\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @returns vwap values.\n */\nexport function defaultVolumeWeightedAveragePrice(\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return volumeWeightedAveragePrice(VWAP_DEFAULT_PERIOD, closings, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { defaultVolumeWeightedAveragePrice } from '../../indicator/volume/volumeWeightedAveragePrice';\nimport { Action } from '../action';\nimport { Asset } from '../asset';\n\n/**\n * Volume weighted average price strategy uses the values that are generated\n * by the Volume Weighted Average Price (VWAP) indicator function to provide\n * a BUY action when the closing is below the VWAP, and a SELL action when\n * the closing is below the VWAP, a HOLD action otherwise.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function volumeWeightedAveragePriceStrategy(asset: Asset): Action[] {\n  const vwap = defaultVolumeWeightedAveragePrice(asset.closings, asset.volumes);\n\n  const diff = subtract(vwap, asset.closings);\n\n  return diff.map((value) => {\n    if (value > 0) {\n      return Action.BUY;\n    } else if (value < 0) {\n      return Action.SELL;\n    } else {\n      return Action.HOLD;\n    }\n  });\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { StrategyFunction } from '../strategy/strategyFunction';\n// buy and hold\nimport { buyAndHoldStrategy } from '../strategy/buyAndHoldStrategy';\n// momentum\nimport { awesomeOscillatorStrategy } from '../strategy/momentum/awesomeOscillatorStrategy';\nimport { ichimokuCloudStrategy } from '../strategy/momentum/ichimokuCloudStrategy';\nimport { rsi2Strategy } from '../strategy/momentum/rsi2Strategy';\nimport { stochasticOscillatorStrategy } from '../strategy/momentum/stochasticOscillatorStrategy';\nimport { williamsRStrategy } from '../strategy/momentum/williamsRStrategy';\n// trend\nimport { defaultAbsolutePriceOscillatorStrategy } from '../strategy/trend/absolutePriceOscillatorStrategy';\nimport { aroonStrategy } from '../strategy/trend/aroonStrategy';\nimport { balanceOfPowerStrategy } from '../strategy/trend/balanceOfPowerStrategy';\nimport { chandeForecastOscillatorStrategy } from '../strategy/trend/chandeForecastOscillatorStrategy';\nimport { kdjStrategy } from '../strategy/trend/kdjStrategy';\nimport { macdStrategy } from '../strategy/trend/macdStrategy';\nimport { parabolicSarStrategy } from '../strategy/trend/parabolicSarStrategy';\nimport { typicalPriceStrategy } from '../strategy/trend/typicalPriceStrategy';\nimport { vortexStrategy } from '../strategy/trend/vortexStrategy';\n// volatility\nimport { accelerationBandsStrategy } from '../strategy/volatility/accelerationBandsStrategy';\nimport { bollingerBandsStrategy } from '../strategy/volatility/bollingerBandsStrategy';\nimport { projectionOscillatorStrategy } from '../strategy/volatility/projectionOscillatorStrategy';\n// volume\nimport { chaikinMoneyFlowStrategy } from '../strategy/volume/chaikinMoneyFlowStrategy';\nimport { easeOfMovementStrategy } from '../strategy/volume/easeOfMovementStrategy';\nimport { forceIndexStrategy } from '../strategy/volume/forceIndexStrategy';\nimport { moneyFlowIndexStrategy } from '../strategy/volume/moneyFlowIndexStrategy';\nimport { negativeVolumeIndexStrategy } from '../strategy/volume/negativeVolumeIndexStrategy';\nimport { volumeWeightedAveragePriceStrategy } from '../strategy/volume/volumeWeightedAveragePriceStrategy';\n\n/**\n * Strategy info.\n */\nexport interface StrategyInfo {\n  name: string;\n  strategy: StrategyFunction;\n}\n\n/**\n * Strategy infos.\n */\nexport const STRATEGY_INFOS: StrategyInfo[] = [\n  // buy and hold\n  {\n    name: 'Buy Hold',\n    strategy: buyAndHoldStrategy,\n  },\n  // momentum\n  {\n    name: 'Awesome Oscillator',\n    strategy: awesomeOscillatorStrategy,\n  },\n  {\n    name: 'RSI 2',\n    strategy: rsi2Strategy,\n  },\n  {\n    name: 'Ichimoku Cloud',\n    strategy: ichimokuCloudStrategy,\n  },\n  {\n    name: 'Stochastic Oscillator',\n    strategy: stochasticOscillatorStrategy,\n  },\n  {\n    name: 'Williams R',\n    strategy: williamsRStrategy,\n  },\n  // trend\n  {\n    name: 'Absolute Price Oscillator (APO)',\n    strategy: defaultAbsolutePriceOscillatorStrategy,\n  },\n  {\n    name: 'Aroon Strategy',\n    strategy: aroonStrategy,\n  },\n  {\n    name: 'Balance of Power (BOM)',\n    strategy: balanceOfPowerStrategy,\n  },\n  {\n    name: 'Chande Forecast Oscillator (CFO)',\n    strategy: chandeForecastOscillatorStrategy,\n  },\n  {\n    name: 'KDJ Strategy',\n    strategy: kdjStrategy,\n  },\n  {\n    name: 'MACD Strategy',\n    strategy: macdStrategy,\n  },\n  {\n    name: 'Parabolic SAR',\n    strategy: parabolicSarStrategy,\n  },\n  {\n    name: 'Typical Price',\n    strategy: typicalPriceStrategy,\n  },\n  {\n    name: 'Vortex Strategy',\n    strategy: vortexStrategy,\n  },\n  // volatility\n  {\n    name: 'Acceleration Bands',\n    strategy: accelerationBandsStrategy,\n  },\n  {\n    name: 'Bollinger Bands',\n    strategy: bollingerBandsStrategy,\n  },\n  {\n    name: 'Projection Oscillator',\n    strategy: projectionOscillatorStrategy,\n  },\n  // volume\n  {\n    name: 'Chaikin Money Flow (CMF)',\n    strategy: chaikinMoneyFlowStrategy,\n  },\n  {\n    name: 'Ease of Movement (EMV)',\n    strategy: easeOfMovementStrategy,\n  },\n  {\n    name: 'Force Index',\n    strategy: forceIndexStrategy,\n  },\n  {\n    name: 'Money Flow Index',\n    strategy: moneyFlowIndexStrategy,\n  },\n  {\n    name: 'Negative Volume Index (NVI)',\n    strategy: negativeVolumeIndexStrategy,\n  },\n  {\n    name: 'Volume Weighted Average Price',\n    strategy: volumeWeightedAveragePriceStrategy,\n  },\n];\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { CompanyResult } from './companyResult';\nimport { StrategyInfo } from './strategyInfo';\nimport { StrategyResult } from './strategyResult';\n\n/**\n * Strategy stats.\n */\nexport interface StrategyStats {\n  strategyInfo: StrategyInfo;\n  score: number;\n  minGain: number;\n  maxGain: number;\n  averageGain: number;\n}\n\n/**\n * New strategy stats from strategy result.\n *\n * @param result strategy result.\n * @return strategy stats.\n */\nfunction newStrategyStats(result: StrategyResult): StrategyStats {\n  return {\n    strategyInfo: result.info,\n    score: 1,\n    minGain: result.gain,\n    maxGain: result.gain,\n    averageGain: result.gain,\n  };\n}\n\n/**\n * Updates strategy stats using strategy result.\n *\n * @param stats strategy stats.\n * @param result strategy result.\n */\nfunction updateStrategyStats(stats: StrategyStats, result: StrategyResult) {\n  stats.score++;\n  stats.minGain = Math.min(stats.minGain, result.gain);\n  stats.maxGain = Math.max(stats.maxGain, result.gain);\n  stats.averageGain = (stats.averageGain + result.gain) / 2;\n}\n\n/**\n * Computes the strategy stats.\n *\n * @param companyResults company results.\n * @return stats array.\n */\nexport function computeStrategyStats(\n  companyResults: CompanyResult[]\n): StrategyStats[] {\n  const statsMap = new Map<string, StrategyStats>();\n\n  for (const companyResult of companyResults) {\n    const strategyResult = companyResult.strategyResults[0];\n\n    const strategyStats = statsMap.get(strategyResult.info.name);\n    if (strategyStats !== undefined) {\n      updateStrategyStats(strategyStats, strategyResult);\n    } else {\n      statsMap.set(strategyResult.info.name, newStrategyStats(strategyResult));\n    }\n  }\n\n  const statsArray = Array.from(statsMap.values());\n  statsArray.sort((a, b) => b.score - a.score);\n\n  return statsArray;\n}\n\n/**\n * Strategy stats sort by.\n */\nexport enum StrategyStatsSortBy {\n  STRATEGY,\n  SCORE,\n  MIN,\n  MAX,\n  AVERAGE,\n}\n\n/**\n * Sorts the strategy stats.\n *\n * @param strategyStats strategy stats.\n * @param sortBy sort by.\n * @param ascending ascending toggle.\n * @return sorted stats.\n */\nexport function sortStrategyStats(\n  strategyStats: StrategyStats[],\n  sortBy: StrategyStatsSortBy,\n  ascending: boolean\n): StrategyStats[] {\n  let sorted: StrategyStats[] = [];\n\n  switch (sortBy) {\n    case StrategyStatsSortBy.STRATEGY:\n      sorted = strategyStats.sort((a, b) =>\n        a.strategyInfo.name.localeCompare(b.strategyInfo.name)\n      );\n      break;\n\n    case StrategyStatsSortBy.SCORE:\n      sorted = strategyStats.sort((a, b) => a.score - b.score);\n      break;\n\n    case StrategyStatsSortBy.MIN:\n      sorted = strategyStats.sort((a, b) => a.minGain - b.minGain);\n      break;\n\n    case StrategyStatsSortBy.MAX:\n      sorted = strategyStats.sort((a, b) => a.maxGain - b.maxGain);\n      break;\n\n    case StrategyStatsSortBy.AVERAGE:\n      sorted = strategyStats.sort((a, b) => a.averageGain - b.averageGain);\n      break;\n  }\n\n  if (!ascending) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Numeric range.\n */\nexport class NumRange {\n  private min: number;\n  private max: number;\n\n  /**\n   * Constructor.\n   * @param min min value.\n   * @param max max value.\n   */\n  constructor(min: number, max: number) {\n    this.min = min;\n    this.max = max;\n  }\n\n  /**\n   * Gets the min value.\n   * @return min value.\n   */\n  getMin(): number {\n    return this.min;\n  }\n\n  /**\n   * Gets the max value.\n   * @return max value.\n   */\n  getMax(): number {\n    return this.max;\n  }\n\n  /**\n   * Calculates the span of the range.\n   * @return span value.\n   */\n  span(): number {\n    return this.max - this.min;\n  }\n\n  /**\n   * Merge function merges the given ranges.\n   * @param ranges range objects.\n   * @return merged ranges.\n   */\n  static merge(ranges: NumRange[]): NumRange {\n    return ranges.reduce(\n      (p, c) => new NumRange(Math.min(p.min, c.min), Math.max(p.max, c.max))\n    );\n  }\n\n  /**\n   * From function returns the range of the values.\n   * @param values values array.\n   * @return range of the values.\n   */\n  static from(values: number[]): NumRange {\n    return new NumRange(Math.min(...values), Math.max(...values));\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { NumRange } from './numRange';\n\n/**\n * Numeric scaler.\n */\nexport class NumScaler {\n  private fromDelta: number;\n  private toDelta: number;\n  private multiplier: number;\n\n  /**\n   * Constructor.\n   * @param from from range.\n   * @param to to range.\n   */\n  constructor(from: NumRange, to: NumRange) {\n    this.fromDelta = from.getMin();\n    this.toDelta = to.getMin();\n    this.multiplier = to.span() / from.span();\n  }\n\n  /**\n   * Scales the given number.\n   * @param n current value.\n   * @return scaled value.\n   */\n  scale(n: number): number {\n    return (n - this.fromDelta) * this.multiplier + this.toDelta;\n  }\n\n  /**\n   * Descales the given number.\n   * @param n scaled value.\n   * @return descaled value.\n   */\n  descale(n: number): number {\n    return (n - this.toDelta) / this.multiplier + this.fromDelta;\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { roundDigits } from '../helper/numArray';\nimport { NumRange } from './numRange';\nimport { NumScaler } from './numScaler';\n\nconst DEFAULT_STYLE = 'black';\nconst DEFAULT_WIDTH = 1;\nconst FOCUS_STYLE = 'red';\nconst FOCUS_WIDTH = 1;\nconst LEGEND_HEIGHT = 30;\nconst LEGEND_GAP = 4;\nconst LEGEND_FONT = '14px Arial';\nconst NO_FOCUS = -1;\nconst DEFAULT_RANGE = new NumRange(0, 1);\n\n/**\n * Data set.\n */\nexport interface DataSet {\n  legend: string;\n  values: number[];\n  style?: string | string[];\n  width?: number;\n}\n\n/**\n * Chart object.\n */\nexport class Chart {\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private dataSets: Map<string, DataSet>;\n  private dateSetsChanged: boolean;\n  private xScaler: NumScaler;\n  private yScaler: NumScaler;\n  private xFocus: number;\n\n  /**\n   * Constructor.\n   * @param id canvas id.\n   */\n  constructor(id: string) {\n    const canvas = document.getElementById(id);\n    if (canvas === null) {\n      throw new Error('Canvas element not found');\n    } else if (!(canvas instanceof HTMLCanvasElement)) {\n      throw new Error('Not a canvas element');\n    }\n\n    this.canvas = canvas;\n\n    const context = this.canvas.getContext('2d');\n    if (context === null) {\n      throw new Error('Canvas context is null');\n    }\n\n    this.context = context;\n    this.dataSets = new Map<string, DataSet>();\n    this.dateSetsChanged = false;\n    this.xScaler = new NumScaler(DEFAULT_RANGE, DEFAULT_RANGE);\n    this.yScaler = new NumScaler(DEFAULT_RANGE, DEFAULT_RANGE);\n    this.xFocus = NO_FOCUS;\n\n    this.canvas.addEventListener('mousemove', (ev) => this.onMouseMove(ev));\n    this.canvas.addEventListener('mouseout', () => this.onMouseOut());\n  }\n\n  /**\n   * Add the data set.\n   * @param dataSet data set.\n   */\n  add(dataSet: DataSet): void {\n    this.dataSets.set(dataSet.legend, dataSet);\n    this.dateSetsChanged = true;\n  }\n\n  /**\n   * Removes the data set by the given legend.\n   * @param legend data set legend value.\n   * @return data set is removed.\n   */\n  remove(legend: string): boolean {\n    const found = this.dataSets.delete(legend);\n    if (found) {\n      this.dateSetsChanged = true;\n    }\n\n    return found;\n  }\n\n  /**\n   * Draw canvas.\n   */\n  draw(): void {\n    if (this.dateSetsChanged) {\n      this.updateScalers();\n      this.dateSetsChanged = false;\n    }\n\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.drawDataSets();\n    this.drawFocus();\n  }\n\n  /**\n   * Draws the data sets.\n   */\n  private drawDataSets() {\n    const height = this.chartHeight();\n\n    for (const dataSet of this.dataSets.values()) {\n      this.context.lineWidth = dataSet.width ?? DEFAULT_WIDTH;\n\n      let lastX = 0;\n      let lastY = 0;\n\n      for (let i = 0; i < dataSet.values.length; i++) {\n        const x = this.xScaler.scale(i);\n        const y = height - this.yScaler.scale(dataSet.values[i]);\n\n        if (i > 0) {\n          this.context.strokeStyle = this.styleAtIndex(dataSet, i);\n          this.context.beginPath();\n          this.context.moveTo(lastX, lastY);\n          this.context.lineTo(x, y);\n          this.context.stroke();\n        }\n\n        lastX = x;\n        lastY = y;\n      }\n    }\n  }\n\n  /**\n   * Style at given index.\n   * @param dataSet data set.\n   * @param index at index.\n   * @return at style.\n   */\n  private styleAtIndex(dataSet: DataSet, index: number): string {\n    if (dataSet.style === undefined) {\n      return DEFAULT_STYLE;\n    } else if (Array.isArray(dataSet.style)) {\n      return dataSet.style[index];\n    } else {\n      return dataSet.style;\n    }\n  }\n\n  /**\n   * Draws focus line and focused values.\n   */\n  private drawFocus() {\n    if (this.xFocus !== NO_FOCUS) {\n      this.drawFocusLine();\n      this.drawFocusedValues();\n    }\n  }\n\n  /**\n   * Draws the focus line.\n   */\n  private drawFocusLine() {\n    this.context.strokeStyle = FOCUS_STYLE;\n    this.context.lineWidth = FOCUS_WIDTH;\n    this.context.beginPath();\n    this.context.moveTo(this.xFocus, 0);\n    this.context.lineTo(this.xFocus, this.chartHeight());\n    this.context.stroke();\n  }\n\n  /**\n   * Draws the focused values.\n   */\n  private drawFocusedValues() {\n    const index = Math.round(this.xScaler.descale(this.xFocus));\n    let xOffset = LEGEND_GAP;\n\n    this.context.font = LEGEND_FONT;\n    this.context.textBaseline = 'bottom';\n\n    for (const dataSet of this.dataSets.values()) {\n      if (index >= 0 && index < dataSet.values.length) {\n        const text =\n          dataSet.legend +\n          ' ' +\n          roundDigits(2, dataSet.values[index]).toString();\n\n        this.context.fillStyle = this.styleAtIndex(dataSet, index);\n        this.context.fillText(text, xOffset, this.canvas.height - LEGEND_GAP);\n\n        xOffset += this.context.measureText(text).width + LEGEND_GAP;\n      }\n    }\n  }\n\n  /**\n   * Calculates the chart height.\n   * @return chart height.\n   */\n  private chartHeight(): number {\n    return this.canvas.height - LEGEND_HEIGHT;\n  }\n\n  /**\n   * Updates scalers.\n   */\n  private updateScalers() {\n    if (this.dataSets.size === 0) {\n      return;\n    }\n\n    this.xScaler = new NumScaler(\n      new NumRange(\n        0,\n        Math.max(...Array.from(this.dataSets.values(), (d) => d.values.length))\n      ),\n      new NumRange(0, this.canvas.width)\n    );\n\n    this.yScaler = new NumScaler(\n      NumRange.merge(\n        Array.from(this.dataSets.values(), (d) => NumRange.from(d.values))\n      ),\n      new NumRange(0, this.chartHeight())\n    );\n  }\n\n  /**\n   * On mouse move event.\n   * @param ev mouse event.\n   */\n  private onMouseMove(ev: MouseEvent) {\n    const clientRect = this.canvas.getBoundingClientRect();\n    this.xFocus = ev.clientX - clientRect.left;\n    this.draw();\n  }\n\n  /**\n   * On mouse out event.\n   */\n  private onMouseOut() {\n    this.xFocus = NO_FOCUS;\n    this.draw();\n  }\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * To ISO date string.\n * @param date date object.\n * @return ISO date.\n */\nexport function toISODateString(date: Date): string {\n  return date.toISOString().substring(0, 10);\n}\n\n/**\n * DaysAgo function returns a date for the given days ago.\n * @param days days ago.\n * @return date object.\n */\nexport function daysAgo(days: number): Date {\n  const ago = new Date();\n  ago.setDate(ago.getDate() - days);\n  return ago;\n}\n\n/**\n * DaysLaterFrom function returns a date later from given\n * date in given days.\n * @param date date object.\n * @param days days later.\n * @return date object.\n */\nexport function daysLaterFrom(date: Date, days: number): Date {\n  const later = new Date(date);\n  later.setDate(later.getDate() + days);\n  return later;\n}\n\n/**\n * ToMonthAndDay function returns string representation of\n * the date as month and day.\n * @param date date boject.\n * @return month and day string.\n */\nexport function toMonthAndDay(date: Date): string {\n  return (date.getMonth() + 1).toString() + '/' + date.getDate().toString();\n}\n", "import { Asset } from \"../strategy/asset\";\nimport { mean } from \"./numArray\";\n\nexport function assetMean(asset: Asset): number[] {\n  return mean(asset.highs, asset.lows);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply, subtract } from '../../helper/numArray';\n\n/**\n * Accumulation/Distribution Indicator (A/D). Cumulative indicator\n * that uses volume and price to assess whether a stock is\n * being accumulated or distributed.\n *\n * MFM = ((Closing - Low) - (High - Closing)) / (High - Low)\n * MFV = MFM * Period Volume\n * AD = Previous AD + CMFV\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volume volume values.\n * @return ad values.\n */\nexport function accumulationDistribution(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volume: number[]\n): number[] {\n  const mfm = divide(\n    subtract(subtract(closings, lows), subtract(highs, closings)),\n    subtract(highs, lows)\n  );\n\n  const mfv = multiply(mfm, volume);\n\n  const ad = new Array<number>(mfv.length);\n\n  for (let i = 0; i < ad.length; i++) {\n    ad[i] = mfv[i];\n    if (i > 0) {\n      ad[i] += ad[i - 1];\n    }\n  }\n\n  return ad;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\nimport { accumulationDistribution } from '../volume/accumulationDistribution';\n\n/**\n * Chaikin oscillator result object.\n */\nexport interface ChaikinOscillator {\n  ad: number[];\n  co: number[];\n}\n\n/**\n * The ChaikinOscillator function measures the momentum of the\n * Accumulation/Distribution (A/D) using the Moving Average\n * Convergence Divergence (MACD) formula. It takes the\n * difference between fast and slow periods EMA of the A/D.\n * Cross above the A/D line indicates bullish.\n *\n * CO = Ema(fastPeriod, AD) - Ema(slowPeriod, AD)\n *\n * @param fastPeriod fast period.\n * @param slowPeriod slow period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @return chaikin oscillator.\n */\nexport function chaikinOscillator(\n  fastPeriod: number,\n  slowPeriod: number,\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[]\n): ChaikinOscillator {\n  const ad = accumulationDistribution(highs, lows, closings, volumes);\n  const co = subtract(ema(fastPeriod, ad), ema(slowPeriod, ad));\n\n  return {\n    ad,\n    co,\n  };\n}\n\n/**\n * The defaultChaikinOscillator function calculates Chaikin Oscillator\n * with the most frequently used fast and short periods, 3 and 10.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @param volumes volume values.\n * @return chaikin oscillator.\n */\nexport function defaultChaikinOscillator(\n  highs: number[],\n  lows: number[],\n  closings: number[],\n  volumes: number[]\n): ChaikinOscillator {\n  return chaikinOscillator(3, 10, highs, lows, closings, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\n\n/** Default fast period value. */\nconst DEFAULT_FAST_PERIOD = 12;\n\n/** Default slow period value. */\nconst DEFAULT_SLOW_PERIOD = 26;\n\n/** Default signal period value. */\nconst DEFAULT_SIGNAL_PERIOD = 9;\n\n/**\n * Percentage price oscillator result.\n */\nexport interface PercentagePriceOscillator {\n  ppo: number[];\n  signal: number[];\n  histogram: number[];\n}\n\n/**\n * Percentage Price Oscillator (PPO). It is a momentum oscillator for the price.\n * It is used to indicate the ups and downs based on the price. A breakout is\n * confirmed when PPO is positive.\n *\n * PVO = ((EMA(fastPeriod, prices) - EMA(slowPeriod, prices)) / EMA(longPeriod, prices)) * 100\n * Signal = EMA(9, PVO)\n * Histogram = PVO - Signal\n *\n * @param fastPeriod fast period.\n * @param slowPeriod slow period.\n * @param signalPeriod signal period.\n * @param prices price values.\n * @returns oscillator result.\n */\nexport function percentagePriceOscillator(\n  fastPeriod: number,\n  slowPeriod: number,\n  signalPeriod: number,\n  prices: number[]\n): PercentagePriceOscillator {\n  const fastEma = ema(fastPeriod, prices);\n  const slowEma = ema(slowPeriod, prices);\n\n  const ppo = multiplyBy(100, divide(subtract(fastEma, slowEma), slowEma));\n  const signal = ema(signalPeriod, ppo);\n  const histogram = subtract(ppo, signal);\n\n  return {\n    ppo,\n    signal,\n    histogram,\n  };\n}\n\n/**\n * Default Percentage Price Oscillator calculates it with the default periods of 12, 26, 9.\n *\n * @param prices price values.\n * @returns oscillator result.\n */\nexport function defaultPercentagePriceOscillator(\n  prices: number[]\n): PercentagePriceOscillator {\n  return percentagePriceOscillator(\n    DEFAULT_FAST_PERIOD,\n    DEFAULT_SLOW_PERIOD,\n    DEFAULT_SIGNAL_PERIOD,\n    prices\n  );\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\n\n/** Default fast period value. */\nconst DEFAULT_FAST_PERIOD = 12;\n\n/** Default slow period value. */\nconst DEFAULT_SLOW_PERIOD = 26;\n\n/** Default signal period value. */\nconst DEFAULT_SIGNAL_PERIOD = 9;\n\n/**\n * Percentage volume oscillator result.\n */\nexport interface PercentageVolumeOscillator {\n  pvo: number[];\n  signal: number[];\n  histogram: number[];\n}\n\n/**\n * Percentage Volume Oscillator (PVO). It is a momentum oscillator for the volume.\n * It is used to indicate the ups and downs based on the volume. A breakout is\n * confirmed when PVO is positive.\n *\n * PVO = ((EMA(fastPeriod, volumes) - EMA(slowPeriod, volumes)) / EMA(longPeriod, volumes)) * 100\n * Signal = EMA(9, PVO)\n * Histogram = PVO - Signal\n *\n * @param fastPeriod fast period.\n * @param slowPeriod slow period.\n * @param signalPeriod signal period.\n * @param volumes volume values.\n * @returns oscillator result.\n */\nexport function percentageVolumeOscillator(\n  fastPeriod: number,\n  slowPeriod: number,\n  signalPeriod: number,\n  volumes: number[]\n): PercentageVolumeOscillator {\n  const fastEma = ema(fastPeriod, volumes);\n  const slowEma = ema(slowPeriod, volumes);\n\n  const pvo = multiplyBy(100, divide(subtract(fastEma, slowEma), slowEma));\n  const signal = ema(signalPeriod, pvo);\n  const histogram = subtract(pvo, signal);\n\n  return {\n    pvo,\n    signal,\n    histogram,\n  };\n}\n\n/**\n * Default Percentage Volume Oscillator calculates it with the default periods of 12, 26, 9.\n *\n * @param volumes volume values.\n * @returns oscillator result.\n */\nexport function defaultPercentageVolumeOscillator(\n  volumes: number[]\n): PercentageVolumeOscillator {\n  return percentageVolumeOscillator(\n    DEFAULT_FAST_PERIOD,\n    DEFAULT_SLOW_PERIOD,\n    DEFAULT_SIGNAL_PERIOD,\n    volumes\n  );\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { abs, divide, multiplyBy, subtract } from '../../helper/numArray';\nimport { sma } from './sma';\nimport { typicalPrice } from './typicalPrice';\n\n/**\n * Default period of CMI.\n */\nexport const CMI_PERIOD = 20;\n\n/**\n * The Community Channel Index (CMI) is a momentum-based oscillator\n * used to help determine when an investment vehicle is reaching a\n * condition of being overbought or oversold.\n *\n * Moving Average = Sma(Period, Typical Price)\n * Mean Deviation = Sma(Period, Abs(Typical Price - Moving Average))\n * CMI = (Typical Price - Moving Average) / (0.015 * Mean Deviation)\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @returns cmi values.\n */\nexport function communityChannelIndex(\n  period: number,\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  const tp = typicalPrice(highs, lows, closings);\n  const ma = sma(period, tp);\n  const md = sma(period, abs(subtract(tp, ma)));\n  const cci = divide(subtract(tp, ma), multiplyBy(0.015, md));\n  return cci;\n}\n\n/**\n * The default community channel index with the period of 20.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @returns cmi values.\n */\nexport function defaultCommunityChannelIndex(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): number[] {\n  return communityChannelIndex(CMI_PERIOD, highs, lows, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from './ema';\n\n/**\n * Dema calculates the Double Exponential Moving Average (DEMA).\n *\n * DEMA = (2 * EMA(values)) - EMA(EMA(values))\n *\n * @param period window period.\n * @param values values array.\n * @return dema values.\n */\nexport function dema(period: number, values: number[]): number[] {\n  const ema1 = ema(period, values);\n  const ema2 = ema(period, ema1);\n\n  const dema = subtract(multiplyBy(2, ema1), ema2);\n\n  return dema;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\nimport { ema } from './ema';\nimport { msum } from './msum';\n\n/**\n * The Mass Index (MI) uses the high-low range to identify trend reversals\n * based on range expansions.\n *\n * Singe EMA = EMA(9, Highs - Lows)\n * Double EMA = EMA(9, Single EMA)\n * Ratio = Single EMA / Double EMA\n * MI = Sum(25, Ratio)\n *\n * @param highs high values.\n * @param lows low values.\n * @returns mi values.\n */\nexport function massIndex(highs: number[], lows: number[]): number[] {\n  const ema1 = ema(9, subtract(highs, lows));\n  const ema2 = ema(9, ema1);\n  const ratio = divide(ema1, ema2);\n  const mi = msum(25, ratio);\n\n  return mi;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { subtract } from '../../helper/numArray';\nimport { sma } from './sma';\n\n/**\n * The Qstick function calculates the ratio of recent up and down bars.\n *\n * QS = Sma(Closing - Opening)\n *\n * @param period window period.\n * @param openings openinig values.\n * @param closings closing values.\n * @return qstick values.\n */\nexport function qstick(\n  period: number,\n  openings: number[],\n  closings: number[]\n): number[] {\n  return sma(period, subtract(closings, openings));\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from './ema';\n\n/**\n * Tema calculates the Triple Exponential Moving Average (TEMA).\n *\n * TEMA = (3 * EMA1) - (3 * EMA2) + EMA3\n * EMA1 = EMA(values)\n * EMA2 = EMA(EMA1)\n * EMA3 = EMA(EMA2)\n *\n * @param period window period.\n * @param values values array.\n * @return tema values.\n */\nexport function tema(period: number, values: number[]): number[] {\n  const ema1 = ema(period, values);\n  const ema2 = ema(period, ema1);\n  const ema3 = ema(period, ema2);\n\n  const temaLine = add(\n    subtract(multiplyBy(3, ema1), multiplyBy(3, ema2)),\n    ema3\n  );\n\n  return temaLine;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { sma } from './sma';\n\n/**\n * Trima function calculates the Triangular Moving Average (TRIMA).\n *\n * If period is even:\n *   TRIMA = SMA(period / 2, SMA((period / 2) + 1, values))\n * If period is odd:\n *   TRIMA = SMA((period + 1) / 2, SMA((period + 1) / 2, values))\n *\n * @param period window period.\n * @param values values array.\n * @return trima values.\n */\nexport function trima(period: number, values: number[]): number[] {\n  let n1 = 0;\n  let n2 = 0;\n\n  if (period % 2 === 0) {\n    n1 = period / 2;\n    n2 = n1 + 1;\n  } else {\n    n1 = (period + 1) / 2;\n    n2 = n1;\n  }\n\n  const trimaLine = sma(n1, sma(n2, values));\n\n  return trimaLine;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, shiftRightAndFillBy, subtract } from '../../helper/numArray';\nimport { ema } from './ema';\n\n/**\n * Triple Exponential Average (TRIX) indicator is an oscillator used to\n * identify oversold and overbought markets, and it can also be used\n * as a momentum indicator. Like many oscillators, TRIX oscillates\n * around a zero line.\n *\n * EMA1 = EMA(period, values)\n * EMA2 = EMA(period, EMA1)\n * EMA3 = EMA(period, EMA2)\n * TRIX = (EMA3 - Previous EMA3) / Previous EMA3\n *\n * @param period window period.\n * @param values values array.\n * @returns trix values.\n */\nexport function trix(period: number, values: number[]): number[] {\n  const ema1 = ema(period, values);\n  const ema2 = ema(period, ema1);\n  const ema3 = ema(period, ema2);\n  const previous = shiftRightAndFillBy(1, ema3[0], ema3);\n  const trix = divide(subtract(ema3, previous), previous);\n  return trix;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, multiply } from '../../helper/numArray';\nimport { msum } from './msum';\n\n/** Default VWMA period value. */\nexport const DEFAULT_VWMA_PERIOD = 20;\n\n/**\n * The vwma function calculates the Volume Weighted Moving Average (VWMA)\n * averaging the price data with an emphasis on volume, meaning areas\n * with higher volume will have a greater weight.\n *\n * VWMA = Sum(Price * Volume) / Sum(Volume) for a given Period.\n *\n * @param period period value.\n * @param closings asset closings.\n * @param volumes asset volumes.\n * @returns vwma values.\n */\nexport function vwma(\n  period: number,\n  closings: number[],\n  volumes: number[]\n): number[] {\n  return divide(\n    msum(period, multiply(closings, volumes)),\n    msum(period, volumes)\n  );\n}\n\n/**\n * The defaultVwma function calculates VWMA with a period of 20.\n *\n * @param closings asset closings.\n * @param volumes asset volumes.\n * @returns vwma values.\n */\nexport function defaultVwma(closings: number[], volumes: number[]): number[] {\n  return vwma(DEFAULT_VWMA_PERIOD, closings, volumes);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength, max, subtract } from '../../helper/numArray';\nimport { sma } from '../../indicator/trend/sma';\n\n/**\n * ATR result.\n */\nexport interface AtrResult {\n  trLine: number[];\n  atrLine: number[];\n}\n\n/**\n * Average True Range (ATR). It is a technical analysis indicator that\n * measures market volatility by decomposing the entire range of stock\n * prices for that period.\n *\n * TR = Max((High - Low), (High - Closing), (Closing - Low))\n * ATR = SMA TR\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return atr result.const ATR_PERIOD = 14;\n */\nexport function atr(\n  period: number,\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): AtrResult {\n  checkSameLength(highs, lows, closings);\n\n  const trLine = max(\n    subtract(highs, lows),\n    subtract(highs, closings),\n    subtract(closings, lows)\n  );\n\n  const atrLine = sma(period, trLine);\n\n  return {\n    trLine,\n    atrLine,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { divide, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\nimport { BollingerBands } from './bollingerBands';\n\nconst PERIOD = 90;\n\n/**\n * Bollinger bands width result.\n */\nexport interface BollingerBandsWidth {\n  bandWidth: number[];\n  bandWidthEma90: number[];\n}\n\n/**\n * Bollinger Band Width. It measures the percentage difference between the\n * upper band and the lower band. It decreases as Bollinger Bands narrows\n * and increases as Bollinger Bands widens\n *\n * During a period of rising price volatity the band width widens, and\n * during a period of low market volatity band width contracts.\n *\n * Band Width = (Upper Band - Lower Band) / Middle Band\n *\n * @param bb bollinger bands.\n * @return bollinger bands width result.\n */\nexport function bollingerBandsWidth(bb: BollingerBands): BollingerBandsWidth {\n  const bandWidth = divide(subtract(bb.upperBand, bb.lowerBand), bb.middleBand);\n\n  const bandWidthEma90 = ema(PERIOD, bandWidth);\n\n  return {\n    bandWidth,\n    bandWidthEma90,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { mmax } from '../trend/mmax';\nimport { mmin } from '../trend/mmin';\nimport { atr } from './atr';\n\nconst PERIOD = 22;\n\n/**\n * Chandelier exit result object.\n */\nexport interface ChandelierExitResult {\n  exitLong: number[];\n  exitShort: number[];\n}\n\n/**\n * Chandelier Exit. It sets a trailing stop-loss based on the\n * Average True Value (ATR).\n *\n * Long Exit = 22-Period SMA High - ATR(22) * 3\n * Chandelier Exit Short = 22-Period SMA Low + ATR(22) * 3\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @return chandelier exit.\n */\nexport function chandelierExit(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): ChandelierExitResult {\n  const atrResult = atr(PERIOD, highs, lows, closings);\n  const atrLine3 = multiplyBy(3, atrResult.atrLine);\n  const highestHigh = mmax(PERIOD, highs);\n  const lowestLow = mmin(PERIOD, lows);\n\n  const exitLong = subtract(highestHigh, atrLine3);\n  const exitShort = add(lowestLow, atrLine3);\n\n  return {\n    exitLong,\n    exitShort,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, divideBy } from '../../helper/numArray';\nimport { mmax } from '../trend/mmax';\nimport { mmin } from '../trend/mmin';\n\n/**\n * Donchian channel result object.\n */\nexport interface DonchianChannelResult {\n  upperChannel: number[];\n  middleChannel: number[];\n  lowerChannel: number[];\n}\n\n/**\n * The Donchian Channel (DC) calculates three lines generated by moving average\n * calculations that comprise an indicator formed by upper and lower bands\n * around a midrange or median band. The upper band marks the highest\n * price of an asset while the lower band marks the lowest price of\n * an asset, and the area between the upper and lower bands\n * represents the Donchian Channel.\n *\n * Upper Channel = Mmax(period, closings)\n * Lower Channel = Mmin(period, closings)\n * Middle Channel = (Upper Channel + Lower Channel) / 2\n *\n * @param period window period.\n * @param closings closing values.\n * @returns dc result.\n */\nexport function donchianChannel(\n  period: number,\n  closings: number[]\n): DonchianChannelResult {\n  const upperChannel = mmax(period, closings);\n  const lowerChannel = mmin(period, closings);\n  const middleChannel = divideBy(2, add(upperChannel, lowerChannel));\n\n  return {\n    upperChannel,\n    middleChannel,\n    lowerChannel,\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { add, multiplyBy, subtract } from '../../helper/numArray';\nimport { ema } from '../trend/ema';\nimport { atr } from './atr';\n\n/**\n * Default period for KC.\n */\nexport const KC_PERIOD = 20;\n\n/**\n * Keltner channel result object.\n */\nexport interface KeltnerChannelResult {\n  middleLine: number[];\n  upperBand: number[];\n  lowerBand: number[];\n}\n\n/**\n * The Keltner Channel (KC) provides volatility-based bands that are placed\n * on either side of an asset's price and can aid in determining the\n * direction of a trend.\n *\n * Middle Line = EMA(period, closings)\n * Upper Band = EMA(period, closings) + 2 * ATR(period, highs, lows, closings)\n * Lower Band = EMA(period, closings) - 2 * ATR(period, highs, lows, closings)\n *\n * @param period window period.\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @returns kc result.\n */\nexport function keltnerChannel(\n  period: number,\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): KeltnerChannelResult {\n  const atrResult = atr(period, highs, lows, closings);\n  const atr2 = multiplyBy(2, atrResult.atrLine);\n\n  const middleLine = ema(period, closings);\n  const upperBand = add(middleLine, atr2);\n  const lowerBand = subtract(middleLine, atr2);\n\n  return {\n    middleLine,\n    upperBand,\n    lowerBand,\n  };\n}\n\n/**\n * The default keltner channel with the default period of 20.\n *\n * @param highs high values.\n * @param lows low values.\n * @param closings closing values.\n * @returns kc result.\n */\nexport function defaultKeltnerChannel(\n  highs: number[],\n  lows: number[],\n  closings: number[]\n): KeltnerChannelResult {\n  return keltnerChannel(KC_PERIOD, highs, lows, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  multiply,\n  multiplyBy,\n  sqrt,\n  subtract,\n} from '../../helper/numArray';\nimport { mmax } from '../trend/mmax';\nimport { sma } from '../trend/sma';\n\n/**\n * Default period for UI.\n */\nexport const UI_DEFAULT_PERIOD = 14;\n\n/**\n * The Ulcer Index (UI) measures downside risk. The index increases in value\n * as the price moves farther away from a recent high and falls as the price\n * rises to new highs.\n *\n * High Closings = Max(period, Closings)\n * Percentage Drawdown = 100 * ((Closings - High Closings) / High Closings)\n * Squared Average = Sma(period, Percent Drawdown * Percent Drawdown)\n * Ulcer Index = Sqrt(Squared Average)\n *\n * @param period window period.\n * @param closings closing values.\n * @returns ui values.\n */\nexport function ulcerIndex(period: number, closings: number[]): number[] {\n  const highClosings = mmax(period, closings);\n  const percentageDrawdown = multiplyBy(\n    100,\n    divide(subtract(closings, highClosings), highClosings)\n  );\n  const squaredAverage = sma(\n    period,\n    multiply(percentageDrawdown, percentageDrawdown)\n  );\n  const ui = sqrt(squaredAverage);\n\n  return ui;\n}\n\n/**\n * The default ulcer index with the default period of 14.\n *\n * @param closings closing values.\n * @returns ui values.\n */\nexport function defaultUlcerIndex(closings: number[]): number[] {\n  return ulcerIndex(UI_DEFAULT_PERIOD, closings);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { checkSameLength } from '../../helper/numArray';\n\n/**\n * On-Balance Volume (OBV). It is a technical trading momentum indicator that\n * uses volume flow to predict changes in stock price.\n *\n *                   volume, if Closing > Closing-Prev\n * OBV = OBV-Prev +       0, if Closing = Closing-Prev\n *                  -volume, if Closing < Closing-Prev\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @return obv values.\n */\nexport function onBalanceVolume(\n  closings: number[],\n  volumes: number[]\n): number[] {\n  checkSameLength(closings, volumes);\n\n  const result = new Array<number>(closings.length);\n\n  for (let i = 1; i < result.length; i++) {\n    if (i === 0) {\n      result[i] = 0;\n    } else {\n      result[i] = result[i - 1];\n\n      if (closings[i] > closings[i - 1]) {\n        result[i] += volumes[i];\n      } else if (closings[i] < closings[i - 1]) {\n        result[i] -= volumes[i];\n      }\n    }\n  }\n\n  return result;\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport {\n  divide,\n  multiply,\n  shiftRightAndFillBy,\n  subtract,\n} from '../../helper/numArray';\nimport { msum } from '../trend/msum';\n\n/**\n * The Volume Price Trend (VPT) provides a correlation between the volume and\n * the price.\n *\n * VPT = Previous VPT + (Volume * (Current Closing - Previous Closing) / Previous Closing)\n *\n * @param closings closing values.\n * @param volumes volume values.\n * @returns volume price trend values.\n */\nexport function volumePriceTrend(\n  closings: number[],\n  volumes: number[]\n): number[] {\n  const previousClosings = shiftRightAndFillBy(1, closings[0], closings);\n  const vpt = multiply(\n    volumes,\n    divide(subtract(closings, previousClosings), previousClosings)\n  );\n  return msum(vpt.length, vpt);\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\n/**\n * Asset object.\n */\nexport interface Asset {\n  dates: Date[];\n  openings: number[];\n  closings: number[];\n  highs: number[];\n  lows: number[];\n  volumes: number[];\n}\n\n/**\n * New asset with length.\n *\n * @param length asset length.\n * @return asset object.\n */\nexport function newAssetWithLength(length: number): Asset {\n  return {\n    dates: new Array<Date>(length),\n    openings: new Array<number>(length),\n    closings: new Array<number>(length),\n    highs: new Array<number>(length),\n    lows: new Array<number>(length),\n    volumes: new Array<number>(length),\n  };\n}\n\n/**\n * Concats the given assets.\n *\n * @param asset1 first asset.\n * @param asset2 second asset.\n * @return new asset.\n */\nexport function concatAssets(asset1: Asset, asset2: Asset): Asset {\n  return {\n    dates: [...asset1.dates, ...asset2.dates],\n    openings: [...asset1.openings, ...asset2.openings],\n    closings: [...asset1.closings, ...asset2.closings],\n    highs: [...asset1.highs, ...asset2.highs],\n    lows: [...asset1.lows, ...asset2.lows],\n    volumes: [...asset1.volumes, ...asset2.volumes],\n  };\n}\n", "// Copyright (c) 2022 Onur Cinar. All Rights Reserved.\n// https://github.com/cinar/indicatorts\n\nimport { Asset } from '../asset';\nimport { Action } from '../action';\nimport { sma } from '../../indicator/trend/sma';\nimport { DEFAULT_VWMA_PERIOD, vwma } from '../../indicator/trend/vwma';\n\n/**\n * The vwmaStrategy function uses SMA and VWMA indicators to provide\n * a BUY action when VWMA is above SMA, and a SELL signal when VWMA\n * is below SMA, a HOLD signal otherwse.\n *\n * @param period period value.\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function wvmaStrategy(period: number, asset: Asset): Action[] {\n  const smaValues = sma(period, asset.closings);\n  const vwmaValues = vwma(period, asset.closings, asset.volumes);\n\n  const result = new Array<Action>(vwmaValues.length);\n\n  for (let i = 0; i < result.length; i++) {\n    if (vwmaValues[i] > smaValues[i]) {\n      result[i] = Action.BUY;\n    } else if (vwmaValues[i] < smaValues[i]) {\n      result[i] = Action.SELL;\n    } else {\n      result[i] = Action.HOLD;\n    }\n  }\n\n  return result;\n}\n\n/**\n * The defaultVwmaStrategy function calculates VWMA with a period of 20.\n *\n * @param asset asset object.\n * @returns strategy actions.\n */\nexport function defaultVwmaStrategy(asset: Asset): Action[] {\n  return wvmaStrategy(DEFAULT_VWMA_PERIOD, asset);\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Action", "BinarySearchTree", "CMF_DEFAULT_PERIOD", "CMI_PERIOD", "Chart", "CompanyResultSortBy", "DEFAULT_VWMA_PERIOD", "EMV_DEFAULT_PERIOD", "KC_PERIOD", "NVI_DEFAULT_PERIOD", "NumRange", "NumScaler", "STRATEGY_INFOS", "StrategyStatsSortBy", "Trend", "UI_DEFAULT_PERIOD", "VWAP_DEFAULT_PERIOD", "abs", "absolutePriceOscillator", "absolutePriceOscillatorStrategy", "accelerationBands", "accelerationBandsStrategy", "accumulationDistribution", "add", "addBy", "applyActions", "aroon", "aroonStrategy", "assetMean", "atr", "awesomeOscillator", "awesomeOscillatorStrategy", "backtest", "balanceOfPower", "balanceOfPowerStrategy", "bollingerBands", "bollingerBandsStrategy", "bollingerBandsWidth", "buyAndHoldStrategy", "chaikinMoneyFlow", "chaikinMoneyFlowStrategy", "chaikinOscillator", "chandeForecastOscillator", "chandeForecastOscillatorStrategy", "chandelierExit", "changes", "checkSameLength", "communityChannelIndex", "computeStrategyStats", "concatAssets", "customRsi", "daysAgo", "daysLaterFrom", "defaultAbsolutePriceOscillator", "defaultAbsolutePriceOscillatorStrategy", "defaultChaikinOscillator", "defaultCommunityChannelIndex", "defaultEaseOfMovement", "defaultForceIndex", "defaultKdj", "defaultKeltnerChannel", "defaultMoneyFlowIndex", "defaultPercentagePriceOscillator", "defaultPercentageVolumeOscillator", "defaultProjectionOscillator", "defaultUlcerIndex", "defaultVolumeWeightedAveragePrice", "defaultVwma", "defaultVwmaStrategy", "dema", "divide", "divideBy", "donchianChannel", "easeOfMovement", "easeOfMovementStrategy", "ema", "extractSigns", "forceIndex", "forceIndexStrategy", "generateNumbers", "ichimokuCloud", "ichimokuCloudStrategy", "kdj", "kdjStrategy", "keltnerChannel", "leastSquare", "linearRegressionUsingLeastSquare", "macd", "macdStrategy", "massIndex", "max", "mean", "mmax", "mmin", "moneyFlowIndex", "moneyFlowIndexStrategy", "movingChandeForecastOscillator", "movingLeastSquare", "movingLinearRegressionUsingLeastSquare", "mstd", "msum", "multiply", "multiplyBy", "negativeVolumeIndex", "negativeVolumeIndexStrategy", "newAssetWithLength", "onBalanceVolume", "parabolicSar", "parabolicSarStrategy", "percentagePriceOscillator", "percentageVolumeOscillator", "pow", "projectionOscillator", "projectionOscillatorStrategy", "qstick", "reverseActions", "rma", "roundDigits", "roundDigitsAll", "rsi", "rsi2", "rsi2Strategy", "shiftRightAndFillBy", "shiftRightBy", "since", "sma", "sortCompanyResults", "sortStrategyStats", "sqrt", "stochasticOscillator", "stochasticOscillatorStrategy", "subtract", "subtractBy", "tema", "toISODateString", "toMonthAndDay", "transpose", "trima", "trix", "typicalPrice", "typicalPriceStrategy", "ulcerIndex", "volumePriceTrend", "volumeWeightedAveragePrice", "volumeWeightedAveragePriceStrategy", "vortex", "vortexStrategy", "vwma", "williamsR", "williamsRStrategy", "wvmaStrategy", "__toCommonJS", "checkSameLength", "values", "length", "i", "mean", "result", "sum", "j", "abs", "value", "add", "values1", "values2", "addBy", "n", "divide", "divideBy", "multiply", "multiplyBy", "subtract", "subtractBy", "shiftRightAndFillBy", "fill", "shiftRightBy", "changes", "extractSigns", "transpose", "max", "row", "roundDigits", "digits", "roundDigitsAll", "generateNumbers", "begin", "end", "step", "pow", "bases", "exponent", "base", "sqrt", "Action", "reverseActions", "actions", "action", "applyActions", "closings", "checkSameLength", "gains", "initialBalance", "balance", "shares", "i", "backtest", "asset", "infos", "result", "i", "actions", "gains", "applyActions", "a", "b", "CompanyResultSortBy", "sortCompanyResults", "companyResults", "sortBy", "ascending", "sorted", "a", "b", "buyAndHoldStrategy", "asset", "sma", "period", "values", "result", "sum", "i", "awesomeOscillator", "highs", "lows", "medianPrice", "divideBy", "add", "sma5", "sma", "sma34", "subtract", "awesomeOscillatorStrategy", "asset", "awesomeOscillator", "value", "BinarySearchTree", "_BinarySearchTree", "value", "node", "current", "found", "info", "minInfo", "maxInfo", "child", "root", "mmax", "period", "values", "result", "bst", "BinarySearchTree", "i", "mmin", "period", "values", "result", "bst", "BinarySearchTree", "i", "ichimokuCloud", "highs", "lows", "closings", "checkSameLength", "conversionLine", "divideBy", "add", "mmax", "mmin", "baseLine", "leadingSpanA", "leadingSpanB", "laggingSpan", "shiftRightBy", "ichimokuCloudStrategy", "asset", "indicator", "ichimokuCloud", "actions", "i", "rma", "period", "values", "result", "sum", "i", "count", "customRsi", "period", "closings", "gains", "losses", "i", "difference", "meanGains", "rma", "meanLosses", "r", "rs", "rsi", "rsi2", "closings", "customRsi", "rsi2Strategy", "asset", "indicator", "rsi2", "actions", "i", "stochasticOscillator", "highs", "lows", "closings", "highestHigh14", "mmax", "lowestLow14", "mmin", "k", "multiplyBy", "divide", "subtract", "d", "sma", "stochasticOscillatorStrategy", "asset", "so", "stochasticOscillator", "actions", "i", "PERIOD", "williamsR", "highs", "lows", "closings", "highestHigh", "mmax", "lowestLow", "mmin", "multiplyBy", "divide", "subtract", "williamsRStrategy", "asset", "williamsR", "value", "ema", "period", "values", "result", "k", "m", "i", "absolutePriceOscillator", "fastPeriod", "slowPeriod", "values", "fast", "ema", "slow", "subtract", "defaultAbsolutePriceOscillator", "runStrategy", "indicator", "result", "i", "absolutePriceOscillatorStrategy", "fastPeriod", "slowPeriod", "asset", "absolutePriceOscillator", "defaultAbsolutePriceOscillatorStrategy", "defaultAbsolutePriceOscillator", "since", "values", "result", "last", "count", "i", "AROON_PERIOD", "aroon", "highs", "lows", "checkSameLength", "sinceLastHigh", "since", "mmax", "sinceLastLow", "mmin", "up", "multiplyBy", "divideBy", "addBy", "down", "aroonStrategy", "asset", "indicator", "aroon", "actions", "i", "balanceOfPower", "openings", "highs", "lows", "closings", "divide", "subtract", "balanceOfPowerStrategy", "asset", "balanceOfPower", "value", "leastSquare", "x", "y", "checkSameLength", "sumX", "sumX2", "sumY", "sumXY", "i", "n", "m", "b", "movingLeastSquare", "period", "linearRegressionUsingLeastSquare", "ls", "addBy", "multiplyBy", "movingLinearRegressionUsingLeastSquare", "add", "multiply", "chandeForecastOscillator", "closings", "x", "generateNumbers", "linearRegressionUsingLeastSquare", "multiplyBy", "divide", "subtract", "movingChandeForecastOscillator", "period", "r", "movingLinearRegressionUsingLeastSquare", "chandeForecastOscillatorStrategy", "asset", "chandeForecastOscillator", "value", "kdj", "rPeriod", "kPeriod", "dPeriod", "highs", "lows", "closings", "highest", "mmax", "lowest", "mmin", "rsv", "multiplyBy", "divide", "subtract", "k", "sma", "d", "j", "defaultKdj", "kdjStrategy", "asset", "kdjResult", "defaultKdj", "actions", "i", "macd", "closings", "ema12", "ema", "ema26", "macdLine", "subtract", "signalLine", "macdStrategy", "asset", "macdResult", "macd", "actions", "i", "Trend", "PSAR_AF_STEP", "PSAR_AF_MAX", "parabolicSar", "highs", "lows", "closings", "checkSameLength", "trends", "psar", "af", "ep", "i", "prevEp", "parabolicSarStrategy", "asset", "parabolicSar", "trend", "typicalPrice", "highs", "lows", "closings", "divideBy", "add", "typicalPriceStrategy", "asset", "tpi", "typicalPrice", "actions", "i", "msum", "period", "values", "result", "sum", "i", "VORTEX_PERIOD", "vortex", "highs", "lows", "closings", "checkSameLength", "prevClosings", "shiftRightBy", "plusVm", "abs", "subtract", "minusVm", "plusVmSum", "msum", "minusVmSum", "tr", "max", "trSum", "plusVi", "divide", "minusVi", "vortexStrategy", "asset", "indicator", "vortex", "actions", "i", "accelerationBands", "highs", "lows", "closings", "checkSameLength", "k", "divide", "subtract", "add", "upperBand", "sma", "multiply", "addBy", "multiplyBy", "middleBand", "lowerBand", "accelerationBandsStrategy", "asset", "ab", "accelerationBands", "actions", "i", "mstd", "period", "values", "result", "averages", "sma", "i", "sum", "k", "BB_PERIOD", "bollingerBands", "closings", "std2", "multiplyBy", "mstd", "middleBand", "sma", "upperBand", "add", "lowerBand", "subtract", "bollingerBandsStrategy", "asset", "bb", "bollingerBands", "actions", "i", "projectionOscillator", "period", "smooth", "highs", "lows", "closings", "x", "generateNumbers", "lsHighs", "movingLeastSquare", "lsLows", "vHighs", "add", "multiply", "vLows", "pu", "mmax", "pl", "mmin", "po", "divide", "multiplyBy", "subtract", "spo", "ema", "defaultProjectionOscillator", "projectionOscillatorStrategy", "asset", "po", "defaultProjectionOscillator", "actions", "i", "CMF_DEFAULT_PERIOD", "chaikinMoneyFlow", "highs", "lows", "closings", "volumes", "moneyFlowMultipler", "divide", "subtract", "moneyFlowVolume", "multiply", "msum", "chaikinMoneyFlowStrategy", "asset", "chaikinMoneyFlow", "value", "EMV_DEFAULT_PERIOD", "easeOfMovement", "period", "highs", "lows", "volumes", "distanceMoved", "changes", "divideBy", "add", "boxRatio", "divide", "subtract", "sma", "defaultEaseOfMovement", "easeOfMovementStrategy", "asset", "defaultEaseOfMovement", "value", "forceIndex", "period", "closings", "volumes", "ema", "multiply", "changes", "defaultForceIndex", "forceIndexStrategy", "asset", "defaultForceIndex", "value", "moneyFlowIndex", "period", "highs", "lows", "closings", "volumes", "rawMoneyFlow", "multiply", "typicalPrice", "signs", "extractSigns", "changes", "moneyFlow", "positiveMoneyFlow", "value", "negativeMoneyFlow", "moneyRatio", "divide", "msum", "multiplyBy", "addBy", "pow", "defaultMoneyFlowIndex", "moneyFlowIndexStrategy", "asset", "defaultMoneyFlowIndex", "value", "NVI_STARTING_VALUE", "NVI_DEFAULT_PERIOD", "negativeVolumeIndex", "closings", "volumes", "checkSameLength", "nvi", "i", "negativeVolumeIndexStrategy", "asset", "nvi", "negativeVolumeIndex", "nvi255", "ema", "NVI_DEFAULT_PERIOD", "actions", "i", "VWAP_DEFAULT_PERIOD", "volumeWeightedAveragePrice", "period", "closings", "volumes", "divide", "msum", "multiply", "defaultVolumeWeightedAveragePrice", "volumeWeightedAveragePriceStrategy", "asset", "vwap", "defaultVolumeWeightedAveragePrice", "subtract", "value", "STRATEGY_INFOS", "buyAndHoldStrategy", "awesomeOscillatorStrategy", "rsi2Strategy", "ichimokuCloudStrategy", "stochasticOscillatorStrategy", "williamsRStrategy", "defaultAbsolutePriceOscillatorStrategy", "aroonStrategy", "balanceOfPowerStrategy", "chandeForecastOscillatorStrategy", "kdjStrategy", "macdStrategy", "parabolicSarStrategy", "typicalPriceStrategy", "vortexStrategy", "accelerationBandsStrategy", "bollingerBandsStrategy", "projectionOscillatorStrategy", "chaikinMoneyFlowStrategy", "easeOfMovementStrategy", "forceIndexStrategy", "moneyFlowIndexStrategy", "negativeVolumeIndexStrategy", "volumeWeightedAveragePriceStrategy", "newStrategyStats", "result", "updateStrategyStats", "stats", "computeStrategyStats", "companyResults", "statsMap", "companyResult", "strategyResult", "strategyStats", "statsArray", "a", "b", "StrategyStatsSortBy", "sortStrategyStats", "sortBy", "ascending", "sorted", "NumRange", "_NumRange", "min", "max", "ranges", "p", "c", "values", "NumScaler", "from", "to", "n", "DEFAULT_STYLE", "DEFAULT_WIDTH", "FOCUS_STYLE", "FOCUS_WIDTH", "LEGEND_HEIGHT", "LEGEND_GAP", "LEGEND_FONT", "NO_FOCUS", "DEFAULT_RANGE", "NumRange", "Chart", "id", "canvas", "context", "NumScaler", "ev", "dataSet", "legend", "found", "height", "lastX", "lastY", "i", "x", "y", "index", "xOffset", "text", "roundDigits", "d", "clientRect", "toISODateString", "date", "daysAgo", "days", "ago", "daysLaterFrom", "later", "toMonthAndDay", "assetMean", "asset", "mean", "accumulationDistribution", "highs", "lows", "closings", "volume", "mfm", "divide", "subtract", "mfv", "multiply", "ad", "i", "chaikinOscillator", "fastPeriod", "slowPeriod", "highs", "lows", "closings", "volumes", "ad", "accumulationDistribution", "co", "subtract", "ema", "defaultChaikinOscillator", "DEFAULT_FAST_PERIOD", "DEFAULT_SLOW_PERIOD", "DEFAULT_SIGNAL_PERIOD", "percentagePriceOscillator", "fastPeriod", "slowPeriod", "signalPeriod", "prices", "fastEma", "ema", "slowEma", "ppo", "multiplyBy", "divide", "subtract", "signal", "histogram", "defaultPercentagePriceOscillator", "DEFAULT_FAST_PERIOD", "DEFAULT_SLOW_PERIOD", "DEFAULT_SIGNAL_PERIOD", "percentageVolumeOscillator", "fastPeriod", "slowPeriod", "signalPeriod", "volumes", "fastEma", "ema", "slowEma", "pvo", "multiplyBy", "divide", "subtract", "signal", "histogram", "defaultPercentageVolumeOscillator", "CMI_PERIOD", "communityChannelIndex", "period", "highs", "lows", "closings", "tp", "typicalPrice", "ma", "sma", "md", "abs", "subtract", "divide", "multiplyBy", "defaultCommunityChannelIndex", "dema", "period", "values", "ema1", "ema", "ema2", "subtract", "multiplyBy", "massIndex", "highs", "lows", "ema1", "ema", "subtract", "ema2", "ratio", "divide", "msum", "qstick", "period", "openings", "closings", "sma", "subtract", "tema", "period", "values", "ema1", "ema", "ema2", "ema3", "add", "subtract", "multiplyBy", "trima", "period", "values", "n1", "n2", "sma", "trix", "period", "values", "ema1", "ema", "ema2", "ema3", "previous", "shiftRightAndFillBy", "divide", "subtract", "DEFAULT_VWMA_PERIOD", "vwma", "period", "closings", "volumes", "divide", "msum", "multiply", "defaultVwma", "atr", "period", "highs", "lows", "closings", "checkSameLength", "trLine", "max", "subtract", "atrLine", "sma", "PERIOD", "bollingerBandsWidth", "bb", "bandWidth", "divide", "subtract", "bandWidthEma90", "ema", "PERIOD", "chandelierExit", "highs", "lows", "closings", "atrResult", "atr", "atrLine3", "multiplyBy", "highestHigh", "mmax", "lowestLow", "mmin", "exitLong", "subtract", "exitShort", "add", "donchianChannel", "period", "closings", "upperChannel", "mmax", "lowerChannel", "mmin", "middleChannel", "divideBy", "add", "KC_PERIOD", "keltnerChannel", "period", "highs", "lows", "closings", "atrResult", "atr", "atr2", "multiplyBy", "middleLine", "ema", "upperBand", "add", "lowerBand", "subtract", "defaultKeltnerChannel", "UI_DEFAULT_PERIOD", "ulcerIndex", "period", "closings", "highClosings", "mmax", "percentageDrawdown", "multiplyBy", "divide", "subtract", "squaredAverage", "sma", "multiply", "sqrt", "defaultUlcerIndex", "onBalanceVolume", "closings", "volumes", "checkSameLength", "result", "i", "volumePriceTrend", "closings", "volumes", "previousClosings", "shiftRightAndFillBy", "vpt", "multiply", "divide", "subtract", "msum", "newAssetWithLength", "length", "concatAssets", "asset1", "asset2", "wvmaStrategy", "period", "asset", "smaValues", "sma", "vwmaValues", "vwma", "result", "i", "defaultVwmaStrategy", "DEFAULT_VWMA_PERIOD"]
}
